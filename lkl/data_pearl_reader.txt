--@name Data Pearl Reader
--@author legokidlogan
--@server
--@model models/sprops/misc/domes/size_0/dome_6x3.mdl


-- CONFIG
local pearlSearchRadius = 40
local pearlPullStrength = 75
local pearlPullDampening = 4
local pearlSettleRadius = 2.5
local pearlSettleSpeedThreshold = 50
local pearlCanUnsettle = true
local pearlCanUnsettleRadius = 5
local pearlHoldPosOffset = Vector( 0, 0, 10 )
-- END CONFIG


local btnSet = nil
local btnLock = nil
local btnPower = nil
local btnOwnerOnly = nil
local pearl = nil
local lockWeld = nil
local pearlSettled = false
local locked = false
local powered = true
local ownerOnly = true
local ready = false

local data = {}
local dataString = ""
local dataCompressed = ""
local dataCompressedIn = ""

prop.setPropUndo( false )
prop.setPropClean( true )

wire.adjustInputs( { "DataCompressedIn" }, { "STRING" } )
wire.adjustOutputs( { "Data", "DataString", "DataCompressed" }, { "TABLE", "STRING", "STRING" } )

if chip():getMaterial() == "" then
    chip():setMaterial( "phoenix_storms/FuturisticTrackRamp_1-2" )
end


----- PRIVATE FUNCTIONS -----

local function wireInput( name, value )
    if name == "DataCompressedIn" then
        dataCompressedIn = value
    end
end

local function setData( tbl, str, compressed )
    data = tbl or {}
    dataString = str or ""
    dataCompressed = compressed or ""

    wire.ports.Data = data
    wire.ports.DataString = dataString
    wire.ports.DataCompressed = dataCompressed
end

local function updateLockButton()
    btnLock:setSubMaterial( 1, locked and "models/cheeze/buttons2/multiply" or "models/cheeze/buttons2/minus" )
end

local function updatePowerButton()
    btnPower:setColor( powered and Color( 0, 255, 0, 255 ) or Color( 255, 0, 0, 255 ) )
end

local function updateOwnerOnlyButton()
    btnOwnerOnly:setColor( ownerOnly and Color( 0, 255, 255, 255 ) or Color( 0, 255, 0, 255 ) )
end

local function setLocked( state )
    if locked == state then return end

    if not state then
        if isValid( lockWeld ) then
            lockWeld:remove()
        end

        lockWeld = nil
        locked = false
        updateLockButton()

        return
    end

    if not isValid( pearl ) then return end
    if not pearlSettled then return end

    locked = true
    updateLockButton()

    pearl:setPos( chip():localToWorld( pearlHoldPosOffset ) )
    lockWeld = constraint.weld( chip(), pearl )
end

local function dropPearl()
    if locked then return end
    if not isValid( pearl ) then return end

    pearl:enableGravity( true )
    hook.runRemote( pearl, "LKL_DataPearl_SetBeingReadBy", false )

    pearl = nil
    pearlSettled = false

    setData()
end

local function setPowered( state )
    if powered == state then return end

    powered = state
    updatePowerButton()

    if not powered then
        setLocked( false )
        dropPearl()
    end
end

local function setOwnerOnly( state )
    if ownerOnly == state then return end

    ownerOnly = state
    updateOwnerOnlyButton()
end

local function hookRunRemoteSafe( targets, hookName, ... )
    local results
    local args = { ... }

    pcall( function()
        results = hook.runRemote( targets, hookName, unpack( args ) )
    end )

    return results
end


----- SETUP (Remote Hook Getters) -----

hook.add( "remote", "LKL_DataPearlReader_GetHoldPos", function( _callingChip, _callingPly, hookName )
    if hookName ~= "LKL_DataPearlReader_GetHoldPos" then return end

    return chip():localToWorld( pearlHoldPosOffset )
end )

hook.add( "remote", "LKL_DataPearlReader_IsLocked", function( _callingChip, _callingPly, hookName )
    if hookName ~= "LKL_DataPearlReader_IsLocked" then return end

    return locked
end )

hook.add( "remote", "LKL_DataPearlReader_IsPowered", function( _callingChip, _callingPly, hookName )
    if hookName ~= "LKL_DataPearlReader_IsPowered" then return end

    return powered
end )

hook.add( "remote", "LKL_DataPearlReader_IsOwnerOnly", function( _callingChip, _callingPly, hookName )
    if hookName ~= "LKL_DataPearlReader_IsOwnerOnly" then return end

    return ownerOnly
end )


----- SETUP (Remote Hook Setters) -----

hook.add( "remote", "LKL_DataPearlReader_SetLocked", function( _callingChip, callingPly, hookName, state )
    if callingPly ~= owner() then return end
    if hookName ~= "LKL_DataPearlReader_SetLocked" then return end

    setLocked( state )
end )

hook.add( "remote", "LKL_DataPearlReader_SetPowered", function( _callingChip, callingPly, hookName, state )
    if callingPly ~= owner() then return end
    if hookName ~= "LKL_DataPearlReader_SetPowered" then return end

    setPowered( state )
end )

hook.add( "remote", "LKL_DataPearlReader_SetOwnerOnly", function( _callingChip, callingPly, hookName, state )
    if callingPly ~= owner() then return end
    if hookName ~= "LKL_DataPearlReader_SetOwnerOnly" then return end

    setOwnerOnly( state )
end )


----- SETUP (Remote Hook Listeners) -----

hook.add( "remote", "LKL_DataPearlReader_DataChanged", function( callingChip, _callingPly, hookName, info )
    if hookName ~= "LKL_DataPearl_DataChanged" then return end
    if callingChip ~= pearl then return end

    setData( info.data, info.dataString, info.dataCompressed )
end )

hook.add( "remote", "LKL_DataPearlReader_ForceDrop", function( _callingChip, callingPly, hookName )
    if callingPly ~= owner() then return end
    if hookName ~= "LKL_DataPearlReader_ForceDrop" then return end

    dropPearl()
end )


----- SETUP (Misc) -----

hook.add( "input", "LKL_DataPearlReader_WireInput", wireInput )

hook.add( "KeyPress", "LKL_DataPearlReader_PressButtons", function( ply, key )
    if ownerOnly and ply ~= owner() then return end
    if key ~= IN_KEY.USE then return end

    local ent = ply:getEyeTrace().Entity

    if ent == btnSet then
        if not isValid( pearl ) then return end
        if not pearlSettled then return end

        hook.runRemote( pearl, "LKL_DataPearl_WriteData", dataCompressedIn, true )
    elseif ent == btnLock then
        setLocked( not locked )
    elseif ent == btnPower then
        setPowered( not powered )
    elseif ent == btnOwnerOnly then
        if ply ~= owner() then return end

        setOwnerOnly( not ownerOnly )
    end
end )

hook.add( "think", "LKL_DataPearlReader_PullInPearl", function()
    if pearl == nil then return end

    if not isValid( pearl ) then
        pearl = nil
        pearlSettled = false
        setLocked( false )
        setData()

        return
    end

    if locked then return end
    if not powered then return end

    local pearlHoldPos = chip():localToWorld( pearlHoldPosOffset )
    local pearlPos = pearl:getPos()
    local toHoldPos = pearlHoldPos - pearlPos
    local dist = toHoldPos:getLength()

    if not pearlSettled or pearlCanUnsettle then
        local pearlShouldSettle

        if pearlSettled then
            pearlShouldSettle = dist <= pearlCanUnsettleRadius
        else
            pearlShouldSettle = dist <= pearlSettleRadius and pearl:getVelocity():getLength() <= pearlSettleSpeedThreshold
        end

        if pearlShouldSettle ~= pearlSettled then
            pearlSettled = pearlShouldSettle

            if pearlSettled then
                local result = hook.runRemote( pearl, "LKL_DataPearl_ReadData" )[1][1]

                setData( result.data, result.dataString, result.dataCompressed )
            else
                setData()
            end
        end
    end

    if dist == 0 then return end

    local physicsMult = timer.frametime() * pearl:getMass()
    local pearlVelOpposite = -pearl:getVelocity()

    pearl:applyForceCenter(
        toHoldPos * pearlPullStrength * physicsMult
        + pearlVelOpposite * pearlPullDampening * physicsMult
    )
end )


timer.create( "LKL_DataPearlReader_SpawnButtons", 0.25, 0, function()
    if not prop.canSpawn() then return end

    if not btnSet then
        pcall( function()
            btnSet = prop.create( chip():localToWorld( Vector( 1.75, -1.5, 1.5 ) ), chip():localToWorldAngles( Angle( 60, -35, 0 ) ), "models/cheeze/buttons2/set_small.mdl", true )
            btnSet:setParent( chip() )
            btnSet:doNotDuplicate( true )
        end )
    elseif not btnLock then
        pcall( function()
            btnLock = prop.create( chip():localToWorld( Vector( 1.75, 1.5, 1.5 ) ), chip():localToWorldAngles( Angle( 60, 35, 0 ) ), "models/cheeze/buttons2/set_small.mdl", true )
            btnLock:setParent( chip() )
            btnLock:doNotDuplicate( true )
            updateLockButton()
        end )
    elseif not btnPower then
        pcall( function()
            btnPower = prop.create( chip():localToWorld( Vector( 1.05, 0, 1.2 ) ), chip():localToWorldAngles( Angle( -25, -180, 0 ) ), "models/fasteroid/led_nano.mdl", true )
            btnPower:setParent( chip() )
            btnPower:doNotDuplicate( true )
            btnPower:setMaterial( "model_color" )
            updatePowerButton()
        end )
    elseif not btnOwnerOnly then
        pcall( function()
            btnOwnerOnly = prop.create( chip():localToWorld( Vector( 1.45, 0, 0.35 ) ), chip():localToWorldAngles( Angle( 70, 0, 0 ) ), "models/fasteroid/led_nano.mdl", true )
            btnOwnerOnly:setParent( chip() )
            btnOwnerOnly:doNotDuplicate( true )
            btnOwnerOnly:setMaterial( "model_color" )
            updateOwnerOnlyButton()
        end )
    end

    if isValid( btnOwnerOnly ) then
        timer.remove( "LKL_DataPearlReader_SpawnButtons" )
        ready = true
    end
end )

timer.create( "LKL_PearlReader_DetectNearestPearl", 0.25, 0, function()
    if not ready then return end
    if locked then return end
    if not powered then return end

    local readerHoldPoss = {}
    local otherReaders = find.byClass( "starfall_processor", function( ent )
        if not isValid( ent ) then return false end
        if ent == chip() then return false end
        if ent:getOwner() ~= owner() then return false end
        if ent:getChipName() ~= "Data Pearl Reader" then return false end

        return true
    end )

    for _, otherChip in ipairs( otherReaders ) do
        local resultsIsPowered = hookRunRemoteSafe( otherChip, "LKL_DataPearlReader_IsPowered" )

        if resultsIsPowered and resultsIsPowered[1][1] then
            local resultsGetHoldPos = hookRunRemoteSafe( otherChip, "LKL_DataPearlReader_GetHoldPos" )

            if resultsGetHoldPos then
                readerHoldPoss[otherChip] = resultsGetHoldPos[1][1]
            end
        end
    end

    local pearlHoldPos = chip():localToWorld( pearlHoldPosOffset )
    local nearestPearl = find.closest( find.byClass( "starfall_processor", function( ent )
        if not isValid( ent ) then return false end
        if ent:getOwner() ~= owner() then return false end
        if ent:getChipName() ~= "Data Pearl" then return false end

        local dist = ent:getPos():getDistance( pearlHoldPos )
        if dist > pearlSearchRadius then return false end

        local beingReadBy = hook.runRemote( ent, "LKL_DataPearl_GetBeingReadBy" )[1][1]
        ent.beingReadBy = beingReadBy

        if isValid( beingReadBy ) and beingReadBy ~= chip() then
            local otherHoldPos = readerHoldPoss[beingReadBy]
            local otherDist = otherHoldPos and ent:getPos():getDistance( otherHoldPos ) or math.huge
            if otherDist <= dist then return false end

            local resultsIsLocked = hookRunRemoteSafe( beingReadBy, "LKL_DataPearlReader_IsLocked" )
            if resultsIsLocked and resultsIsLocked[1][1] then return false end
        end

        return true
    end ), pearlHoldPos )

    if nearestPearl == pearl then return end

    if isValid( pearl ) then
        dropPearl()
    end

    pearlSettled = false
    pearl = nearestPearl

    if isValid( pearl ) then
        local otherReader = pearl.beingReadBy

        if isValid( otherReader ) and otherReader ~= chip() then
            hookRunRemoteSafe( otherReader, "LKL_DataPearlReader_ForceDrop" )
        end

        pearl:enableGravity( false )
        hook.runRemote( pearl, "LKL_DataPearl_SetBeingReadBy", true )
    end

    setData()
end )


timer.simple( 1, function()
    wireInput( "DataCompressedIn", wire.ports.DataCompressedIn )
end )
