--@name Table Clone Deep
--@author legokidlogan
--@shared

if table.cloneDeep then return end

local _tableCloneDeep
local isClassObject = isClassObject

local type = type
local Vector = Vector
local Angle = Angle
local Color = Color


--[[
    - Similar to table.copy(), but performs deep clones of Vectors, Angles, and Colors as well.
    - Also respects middleclass objects, preserving their reference instead of deep-cloning them.
        - If you want a specific class to be deep-cloned, then define a :cloneDeep() method on it.

    source: (any)
        - The table or value to clone.
    layerLimit: (optional) (number)
        - The maximum number of subtable layers to clone.
        - Anything beyond this will still end up in the result, but will not be deep clones.
        - Defaults to 8.

    RETURNS: out
        out: (any)
            - The cloned table or value.
--]]
function table.cloneDeep( source, layerLimit )
    return _tableCloneDeep( source, layerLimit or 8, {}, 1, type( source ) )
end


_tableCloneDeep = function( source, layerLimit, target, layer, sourceType )
    if layer > layerLimit then return target end

    if sourceType == "Vector" then
        return Vector( source[1], source[2], source[3] )
    elseif sourceType == "Angle" then
        return Angle( source[1], source[2], source[3] )
    elseif sourceType == "Color" then
        return Color( source.r, source.g, source.b, source.a )
    elseif sourceType ~= "table" then
        return source
    elseif isClassObject( source ) then
        if source.cloneDeep then return source:cloneDeep() end

        return source
    end

    for key, val in pairs( source ) do
        local valType = type( val )

        if valType == "table" then
            local targetVal = {}

            target[key] = targetVal
            _tableCloneDeep( val, layerLimit, targetVal, layer + 1, valType )
        else
            target[key] = _tableCloneDeep( val, layerLimit, target, layer + 1, valType )
        end
    end

    return target
end

-- Redefine if lkl/middleclass_extras.txt isn't present.
if not isClassObject then
    isClassObject = function( classObj )
        --if type( classObj ) ~= "table" then return false end
        if classObj.name == nil then return false end
        if classObj.subclass == nil then return false end
        if classObj.allocate == nil then return false end

        return true
    end
end
