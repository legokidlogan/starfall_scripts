--@name Car Controller
--@author legokidlogan
--@server

projectNameID = projectNameID or "CarCon"
printName = printName or ( "[" .. projectNameID .. "]" )


-- CONFIG
local gearChangeDoPrint = true
local gearChangeDoSound = true
local gears = { -- Properties not defined in additional gears will default to what they are in the first gear.
    {
        name = "Normal",

        forwardSpeed = 16, -- Speed for driving forwards
        backwardSpeed = 12, -- Speed for drving backwards
        boostMult = 1.5, -- Speed multiplier when holding shift

        turnTorque = 20, -- Strength of torque used to assist in making sharper turns
        turnTorqueBackwards = 20, -- Strength of torque used to assist in making sharper turns while driving backwards
        turnTorqueBoostMult = 1.25, -- Multiplier for turn assist strength when holding shift
        turnAngle = 35, -- When turning, rotates the forward/backward force by this many degrees
        turnRedirect = 0.1, -- A fraction of the car's velocity will be redirected to whichever way the wheels are facing. Reduces drifting, and helps with spherical wheels.
        turnRedirectTime = 0.5, -- When starting to turn or changing directions, turn redirect will take this many seconds to reach full strength.

        pushdownStrength = 0.75, -- Strength of force used to push the car into the ground, hugging it more closely.
        pushdownStrengthWall = 0, -- Strength of force used to cling against walls.
        wallAntiGravityStrength = 0, -- Strength of force used to counteract gravity when clinging to a wall.
        flipUprightStrength = 15, -- Strength of force used to upright the car when using a or d when it's upside-down.
        antiFlipStrength = 10, -- Strength of torque used to keep the car from flipping over while turning.

        dampenMultPassive = 0.01, -- Passive dampening multiplier, acts like air resistance.
        dampenMultBrake = 0.1, -- Active dampening multiplier, makes braking faster.
        dampenMultPark = 0.1, -- Dampening when the car is at or below the park speed.
        dampenMultParkSpeed = 300, -- Park speed.

        dampenMultAngPassive = 0.12, -- Passive dampening multiplier for angular velocity.
        dampenMultAngBrake = 0.25, -- Active dampening multiplier for angular velocity.
        dampenMultAngPark = 0.25, -- Angular dampening when the car is at or below the park speed.

        wheelPropertySpeed = 500, -- Speed threshold for changing wheel properties.
    },

    {
        name = "Normal Cling",

        pushdownStrengthWall = 14,
        wallAntiGravityStrength = 9,
    },

    {
        name = "Fast",

        forwardSpeed = 16 * 1.5,
        backwardSpeed = 12 * 1.5,
        turnRedirect = 0.1 / 1.5,
    },

    {
        name = "Fast Cling",

        forwardSpeed = 16 * 1.5,
        backwardSpeed = 12 * 1.5,
        turnRedirect = 0.1 / 1.5,

        pushdownStrengthWall = 14,
        wallAntiGravityStrength = 9,
    },

    {
        name = "Faster",

        forwardSpeed = 16 * 2,
        backwardSpeed = 12 * 2,
        turnRedirect = 0.1 / 2,
    },

    {
        name = "Fasterer",

        forwardSpeed = 16 * 3,
        backwardSpeed = 12 * 3,
        turnRedirect = 0.1 / 3,
    },
}

local dampenMultParkEnabled = true -- When at a slow speed and the driver is making no inputs, apply park dampening.

local wheelPropertyEnabled = true
local wheelPropertySlow = "jeeptire"
local wheelPropertyFast = "ice"

local uprightDetectionInterval = 0.05 -- The time between updates for determining what direction is 'up' relative to the current ground.
local carHeight = 35 -- The approximate height of your car from the ground to the middle of the base.
local wallAntiGravityThreshold = 0.25

local soundUpdateInterval = 0.1
local soundConfig = {
    ActiveAmbient = {
        Path = "ambient/machines/diesel_engine_idle1.wav",
        FadeInTime = 2,
        FadeOutTime = 2,
        Volume = 0.15,
        Pitch = 100,
        Level = 70,
    },
    ActiveDrive = {
        Path = "vehicles/airboat/fan_motor_fullthrottle_loop1.wav",
        FadeInTime = 2,
        FadeOutTime = 2,
        Level = 90,
        SlowVolume = 0.3,
        FastVolume = 1,
        SlowPitch = 75,
        FastPitch = 120,
        SlowSpeed = 250,
        FastSpeed = 1000,
        StartAndStopSpeed = 175,
        FadeOutDelay = 1,
    },
}
-- END CONFIG

--[[ INFO:
    - Wire inputs:
        - Base: The base prop for the car.
        - PodController: The pod controller linked to your car. Will auto-wire some other inputs like Driver and the buttons.
        - OrientProp: Determines the forward, right, and up directions of the car, in case your base prop model has a janky orientation.
    - Important config notes:
        - Make sure carHeight is accurate! It's used for detecting if you're on the ground or not, which is important for stability and uprighting.
--]]


local base
local chair
local driver
local podController
local orientProp
local baseBoxSize
local groundTraceLength = carHeight * 1.05 + 20
local uprightThreshold = 0.2
local antiFlipThreshold = math.cos( math.rad( 5 ) )
local driveForceForward = 0
local driveForceTurn = 0
local turnState = 0
local contraptionMass = 0
local btnStateW = false
local btnStateA = false
local btnStateS = false
local btnStateD = false
local btnStateShift = false
local drivingBackwards = false
local stoppingActiveDrive = false
local activeDriveSoundReady = true
local isUpright = true
local isFlipping = false
local antiFlipDir = 0
local isNearGround = true
local isOnWall = false
local worldUp = Vector( 0, 0, 1 )
local groundUp = Vector( 0, 0, 1 )
local soundObjects = {}
local contraption = {}
local wheels = {}
local wheelPropertyState = false
local gearNum = -1
local gearCount = #gears
local cycleGearUpVal = 0
local cycleGearDownVal = 0
local turnRedirectThreshold = math.cos( math.rad( 5 ) )
local turnRedirectStartTime = 0

-- Gear defaults
local forwardSpeed = 16
local backwardSpeed = 12
local boostMult = 1.5

local turnTorque = 20
local turnTorqueBackwards = 20
local turnTorqueBoostMult = 1.25
local turnAngle = 30
local turnRedirect = 0.1
local turnRedirectTime = 0.5

local pushdownStrength = 0.75
local pushdownStrengthWall = 14
local wallAntiGravityStrength = 9
local flipUprightStrength = 10
local antiFlipStrength = 10

local dampenMultPassive = 0.01
local dampenMultBrake = 0.1
local dampenMultPark = 0.1
local dampenMultParkSpeed = 300
local dampenMultAngPassive = 0.12
local dampenMultAngBrake = 0.25

local wheelPropertySpeed = 500
-- End gear defaults

local tableInsert = table.insert


inputNames = inputNames or {}
inputTypes = inputTypes or {}

outputNames = outputNames or {}
outputTypes = outputTypes or {}


tableInsert( inputNames, "Wheels" )
tableInsert( inputTypes, "ARRAY" )

tableInsert( inputNames, "Base" )
tableInsert( inputTypes, "ENTITY" )

tableInsert( inputNames, "PodController" )
tableInsert( inputTypes, "ENTITY" )

tableInsert( inputNames, "OrientProp" )
tableInsert( inputTypes, "ENTITY" )

tableInsert( inputNames, "Chair" )
tableInsert( inputTypes, "ENTITY" )

tableInsert( inputNames, "Driver" )
tableInsert( inputTypes, "ENTITY" )

tableInsert( inputNames, "W" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "A" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "S" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "D" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "Shift" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "CycleGearUp" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "CycleGearDown" )
tableInsert( inputTypes, "NUMBER" )

tableInsert( inputNames, "SetGearTo" )
tableInsert( inputTypes, "NUMBER" )


tableInsert( outputNames, "GearNum" )
tableInsert( outputTypes, "NUMBER" )

tableInsert( outputNames, "GearCount" )
tableInsert( outputTypes, "NUMBER" )

tableInsert( outputNames, "Gear" )
tableInsert( outputTypes, "TABLE" )


wire.adjustInputs( inputNames, inputTypes )
wire.adjustOutputs( outputNames, outputTypes )

wire.ports.GearCount = gearCount


-- Starfall traces throw an error if any entities in a filter table are invalid, so use this instead to auto-purge invalid entities.
-- startPos, andPos, and filterTable are required, the rest are optional. filterTable must be a table.
local function safeTraceLine( startPos, endPos, filterTable, mask, colgroup, ignworld )
    local tr

    pcall( function()
        tr = trace.line( startPos, endPos, filterTable, mask, colgroup, ignworld )
    end )

    if tr then return tr end

    for i = #filterTable, 1, -1 do
        if not isValid( filterTable[i] ) then
            table.remove( filterTable, i )
        end
    end

    return trace.line( startPos, endPos, filterTable, mask, colgroup, ignworld )
end

local function checkWheelProperty( force )
    if not wheelPropertyEnabled then return end
    if not isValid( base ) then return end

    local oldState = wheelPropertyState
    wheelPropertyState = base:getVelocity():getLength() >= wheelPropertySpeed

    if not force and wheelPropertyState == oldState then return end

    local physMat = wheelPropertyState and wheelPropertyFast or wheelPropertySlow

    for _, wheel in ipairs( wheels ) do
        if isValid( wheel ) then
            local physObj = wheel:getPhysicsObject()

            if isValid( physObj ) then
                physObj:setMaterial( physMat )
            end
        end
    end
end

local function changeGear( ind )
    if ind == true then
        ind = gearNum % gearCount + 1
    elseif ind == false then
        ind = gearNum - 1
        if ind < 1 then ind = gearCount end
    end

    if ind == gearNum then return end
    if ind < 1 or ind > gearCount then return end

    local oldGearNum = gearNum
    gearNum = ind

    local gear = gears[ind]
    local firstGear = gears[1]

    forwardSpeed = gear.forwardSpeed or firstGear.forwardSpeed
    backwardSpeed = gear.backwardSpeed or firstGear.backwardSpeed
    boostMult = gear.boostMult or firstGear.boostMult

    turnTorque = gear.turnTorque or firstGear.turnTorque
    turnTorqueBackwards = gear.turnTorqueBackwards or firstGear.turnTorqueBackwards
    turnTorqueBoostMult = gear.turnTorqueBoostMult or firstGear.turnTorqueBoostMult
    turnAngle = gear.turnAngle or firstGear.turnAngle
    turnRedirect = gear.turnRedirect or firstGear.turnRedirect
    turnRedirectTime = gear.turnRedirectTime or firstGear.turnRedirectTime

    pushdownStrength = gear.pushdownStrength or firstGear.pushdownStrength
    pushdownStrengthWall = gear.pushdownStrengthWall or firstGear.pushdownStrengthWall
    wallAntiGravityStrength = gear.wallAntiGravityStrength or firstGear.wallAntiGravityStrength
    flipUprightStrength = gear.flipUprightStrength or firstGear.flipUprightStrength
    antiFlipStrength = gear.antiFlipStrength or firstGear.antiFlipStrength

    dampenMultPassive = gear.dampenMultPassive or firstGear.dampenMultPassive
    dampenMultBrake = gear.dampenMultBrake or firstGear.dampenMultBrake
    dampenMultPark = gear.dampenMultPark or firstGear.dampenMultPark
    dampenMultParkSpeed = gear.dampenMultParkSpeed or firstGear.dampenMultParkSpeed

    dampenMultAngPassive = gear.dampenMultAngPassive or firstGear.dampenMultAngPassive
    dampenMultAngBrake = gear.dampenMultAngBrake or firstGear.dampenMultAngBrake

    wheelPropertySpeed = gear.wheelPropertySpeed or firstGear.wheelPropertySpeed

    if isValid( base ) then
        checkWheelProperty( true )
    end

    local gearName = gear.name

    if gearChangeDoPrint and driver == owner() then
        local printTbl = {
            Color( 255, 255, 255 ), printName .. " Changed gear to ",
            Color( 255, 255, 0 ), tostring( gearNum ),
            Color( 255, 255, 255 ), "/",
            Color( 255, 255, 150 ), tostring( gearCount ),
        }

        if gearName then
            table.insert( printTbl, Color( 255, 255, 255 ) )
            table.insert( printTbl, " (" )
            table.insert( printTbl, Color( 255, 255, 0 ) )
            table.insert( printTbl, gearName )
            table.insert( printTbl, Color( 255, 255, 255 ) )
            table.insert( printTbl, ")" )
        end

        print( unpack( printTbl ) )
    end

    if gearChangeDoSound and isValid( chair ) then
        chair:emitSound( "buttons/lever7.wav", 75, math.lerp( gearNum / gearCount, 90, 110 ) )
    end

    hook.run( "LKL_CarCon_ChangeGear", oldGearNum, gearNum, gearName )

    wire.ports.GearNum = gearNum
    wire.ports.Gear = gear
end

local function baseWidthInDirection( worldDir )
    if not isValid( base ) then return Vector( 0, 0, 0 ) end

    return ( base:localToWorldVector( baseBoxSize ) * worldDir ):getLength()
end

local function startActiveAmbientSound()
    if not isValid( base ) then return end

    local activeAmbientSound = soundObjects.ActiveAmbient
    local activeAmbientData = soundConfig.ActiveAmbient

    if not activeAmbientSound:isPlaying() then
        activeAmbientSound:play()
        activeAmbientSound:setVolume( 0 )
        activeAmbientSound:setPitch( activeAmbientData.Pitch )
        activeAmbientSound:setDSP( activeAmbientData.Level )
    end

    activeAmbientSound:setVolume( activeAmbientData.Volume, activeAmbientData.FadeInTime )
end

local function stopActiveSounds()
    if not isValid( base ) then return end

    local activeAmbientSound = soundObjects.ActiveAmbient
    local activeAmbientData = soundConfig.ActiveAmbient

    activeAmbientSound:stop( activeAmbientData.FadeOutTime )

    local activeDriveSound = soundObjects.ActiveDrive
    local activeDriveData = soundConfig.ActiveDrive

    activeDriveSound:stop( activeDriveData.FadeOutTime )
    stoppingActiveDrive = false
    activeDriveSoundReady = false
    timer.remove( "LKL_CarCon_StopActiveDriveSound" )
    timer.remove( "LKL_CarCon_ActiveDriveSoundReady" )
end

local function updateDriveDirections()
    if not driver then
        driveForceForward = 0
        driveForceTurn = 0
        turnState = 0

        return
    end

    local oldTurnState = turnState

    drivingBackwards = false

    if btnStateW then
        if btnStateS then
            driveForceForward = 0
        else
            driveForceForward = btnStateShift and ( forwardSpeed * boostMult ) or forwardSpeed
        end
    elseif btnStateS then
        driveForceForward = btnStateShift and ( -backwardSpeed * boostMult ) or -backwardSpeed
        drivingBackwards = true
    else
        driveForceForward = 0
    end

    if btnStateA then
        if btnStateD then
            turnState = 0
        else
            turnState = 1
        end
    elseif btnStateD then
        turnState = -1
    else
        turnState = 0
    end

    driveForceTurn = ( drivingBackwards and -turnTorqueBackwards or turnTorque ) * turnState

    if btnStateShift then
        driveForceTurn = driveForceTurn * turnTorqueBoostMult
    end

    if turnState ~= oldTurnState then
        turnRedirectStartTime = timer.curtime()
    end
end

local function wireInput( name, value )
    if name == "Wheels" then
        wheels = value or {}

        checkWheelProperty( true )
    elseif name == "Base" then
        base = isValid( value ) and value

        if base then
            baseBoxSize = base:obbSize() / 2
            contraption = base:getAllConstrained()
            contraptionMass = 0

            local contraptionPhysical = base:getAllConstrained( {
                Weld = true,
                Rope = true,
                Axis = true,
                Motor = true,
                Slider = true,
                Winch = true,
                Ballsocket = true,
                AdvBallsocket = true,
            } )

            for _, ent in ipairs( contraptionPhysical ) do
                pcall( function()
                    contraptionMass = contraptionMass + ent:getMass()
                end )
            end

            for sndName, sndData in pairs( soundConfig ) do
                local sndObj = soundObjects[sndName]

                if isValid( sndObj ) then
                    sndObj:stop()
                    sndObj:destroy()
                end

                sndObj = sound.create( base, sndData.Path, false )
                sndObj:stop()
                soundObjects[sndName] = sndObj
            end

            checkWheelProperty( true )
        else
            for sndName, sndObj in pairs( soundObjects ) do
                if isValid( sndObj ) then
                    sndObj:stop()
                    sndObj:destroy()
                end

                soundObjects[sndName] = nil
            end
        end
    elseif name == "PodController" then
        podController = isValid( value ) and value

        if not podController then return end

        wire.create( chip(), podController, "Chair", "Entity" )
        wire.create( chip(), podController, "Driver", "Driver" )
        wire.create( chip(), podController, "W", "W" )
        wire.create( chip(), podController, "A", "A" )
        wire.create( chip(), podController, "S", "S" )
        wire.create( chip(), podController, "D", "D" )
        wire.create( chip(), podController, "Shift", "Shift" )
    elseif name == "OrientProp" then
        orientProp = isValid( value ) and value
    elseif name == "Chair" then
        chair = isValid( value ) and value:isVehicle() and value
    elseif name == "Driver" then
        driver = isValid( value ) and value:isPlayer() and value

        --targetedInput.setTargets( driver )
        timer.simple( 0.3, updateDriveDirections )

        if driver then
            startActiveAmbientSound()
        else
            stopActiveSounds()
        end
    elseif name == "W" then
        btnStateW = value ~= 0
        updateDriveDirections()
    elseif name == "A" then
        btnStateA = value ~= 0
        updateDriveDirections()
    elseif name == "S" then
        btnStateS = value ~= 0
        updateDriveDirections()
    elseif name == "D" then
        btnStateD = value ~= 0
        updateDriveDirections()
    elseif name == "Shift" then
        btnStateShift = value ~= 0
        updateDriveDirections()
    elseif name == "CycleGearUp" then
        if value ~= 0 and value ~= cycleGearUpVal then
            changeGear( true )
        end

        cycleGearUpVal = value
    elseif name == "CycleGearDown" then
        if value ~= 0 and value ~= cycleGearDownVal then
            changeGear( false )
        end

        cycleGearDownVal = value
    elseif name == "SetGearTo" then
        changeGear( value )
    end
end


changeGear( 1 )

hook.add( "input", "LKL_CarCon_WireInput", wireInput )

hook.add( "think", "LKL_CarCon_DriveCar", function()
    --if not isValid( base ) or not isValid( driver ) then return end
    if not isValid( base ) then return end

    if not isValid( orientProp ) then
        orientProp = base
    end

    local mass = base:getMass()

    if isNearGround and ( dampenMultPassive ~= 0 or dampenMultBrake ~= 0 ) then
        local carVel = base:getVelocity()
        local dampenMultEff

        if driveForceForward == 0 then
            if dampenMultParkEnabled and driveForceTurn == 0 and carVel:getLength() <= dampenMultParkSpeed then
                dampenMultEff = dampenMultPark
            else
                dampenMultEff = dampenMultPassive
            end
        else
            local driveDir = orientProp:getForward() * driveForceForward

            if carVel:dot( driveDir ) >= 0 then -- Perpendicular or facing together
                dampenMultEff = dampenMultPassive
            else -- Facing away (trying to brake)
                dampenMultEff = dampenMultBrake
            end
        end

        carVel[3] = 0

        base:applyForceCenter( carVel * -dampenMultEff * mass )
    end

    if isNearGround and ( dampenMultAngPassive ~= 0 or dampenMultAngBrake ~= 0 ) then
        local physObj = base:getPhysicsObject()
        local angVel = physObj:getAngleVelocity()
        local dampenMultEff

        if driveForceTurn == 0 then
            dampenMultEff = dampenMultAngPassive
        else
            local angVelLocal = orientProp:worldToLocalVector( base:localToWorldVector( angVel ) )
            local angVelSign = math.sign( angVelLocal[3] )

            if angVelSign == math.sign( driveForceTurn ) then
                dampenMultEff = dampenMultAngPassive
            else
                dampenMultEff = dampenMultAngBrake
            end
        end

        physObj:addAngleVelocity( -angVel * dampenMultEff )
    end

    if not isValid( driver ) then return end

    if isUpright then
        if isNearGround then
            local clingStrengthEff = isOnWall and pushdownStrengthWall or pushdownStrength

            base:applyForceCenter( -groundUp * clingStrengthEff * mass )
        end
    else
        -- Upright force
        local uprightRightDir

        if btnStateA then
            if not btnStateD then
                uprightRightDir = orientProp:getUp()
            end
        elseif btnStateD then
            uprightRightDir = -orientProp:getUp()
        end

        if uprightRightDir then
            local basePos = base:getPos()
            local uprightRightOffset = orientProp:getRight()
            uprightRightOffset = uprightRightOffset * baseWidthInDirection( uprightRightOffset )

            base:applyForceOffset( uprightRightDir * flipUprightStrength * mass, basePos + uprightRightOffset )
            base:applyForceOffset( -uprightRightDir * flipUprightStrength * mass, basePos - uprightRightOffset )
        end
    end

    if not isNearGround then return end

    if driveForceForward ~= 0 then
        --base:applyForceCenter( orientProp:getForward() * driveForceForward * mass )
        local dir = orientProp:getForward()

        if driveForceTurn ~= 0 then
            dir = dir:rotateAroundAxis( orientProp:getUp(), turnAngle * math.sign( driveForceTurn ) )
        end

        base:applyForceCenter( dir * driveForceForward * mass )
    end

    if driveForceTurn ~= 0 then
        base:applyTorque( orientProp:getUp() * driveForceTurn * mass )

        if antiFlipStrength > 0 and isFlipping then
            base:applyTorque( orientProp:getForward() * antiFlipStrength * antiFlipDir * mass )
        end
    end

    if turnRedirect > 0 then
        local carVel = base:getVelocity()
        local carSpeed = carVel:getLength()

        if carSpeed > 0 then
            local wheelDir = orientProp:getForward()

            if turnState ~= 0 then
                wheelDir = wheelDir:rotateAroundAxis( orientProp:getUp(), turnAngle * turnState )
            end

            if drivingBackwards then
                wheelDir = -wheelDir
            end

            local carVelDir = carVel / carSpeed
            local dot = carVelDir:dot( wheelDir )

            -- If not more than 90 degrees away, and not too close where it would be redundant
            if dot > 0 and dot < turnRedirectThreshold then
                local turnRedirectEff = turnRedirect * mass

                if turnRedirectTime > 0 then
                    local timeSince = timer.curtime() - turnRedirectStartTime
                    turnRedirectEff = turnRedirectEff * math.min( timeSince / turnRedirectTime, 1 )
                end

                local forceCounteract = -carVel * turnRedirectEff
                local forceRedirected = wheelDir * carSpeed * turnRedirectEff

                base:applyForceCenter( forceCounteract + forceRedirected )
            end
        end
    end

    -- Wall anti-gravity:
    if isOnWall then
        base:applyForceCenter( worldUp * wallAntiGravityStrength * contraptionMass )
    end
end )


timer.create( "LKL_CarCon_UpdateGroundDirection", uprightDetectionInterval, 0, function()
    if not isValid( base ) or not isValid( driver ) then return end
    if not isValid( orientProp ) then return end

    local orientUp = orientProp:getUp()
    local startPos = base:getPos()
    local endPos = startPos - orientUp * groundTraceLength
    local tr = safeTraceLine( startPos, endPos, contraption )

    isNearGround = tr.Hit

    if isNearGround then
        groundUp = tr.HitNormal
    else
        groundUp = Vector( 0, 0, 1 )
    end

    local dot = orientUp:dot( groundUp )

    isUpright = dot >= uprightThreshold
    isFlipping = isUpright and dot < antiFlipThreshold
    isOnWall = isNearGround and groundUp:dot( worldUp ) <= wallAntiGravityThreshold

    if isFlipping then
        antiFlipDir = math.sign( orientProp:getRight().z )
    end
end )

timer.create( "LKL_CarCon_UpdateActiveDriveSound", soundUpdateInterval, 0, function()
    if not isValid( base ) or not isValid( driver ) then return end

    local carSpeed = base:getVelocity():getLength()

    local activeDriveSound = soundObjects.ActiveDrive
    local activeDriveData = soundConfig.ActiveDrive

    if carSpeed < activeDriveData.StartAndStopSpeed then
        if not activeDriveSound:isPlaying() then return end
        if stoppingActiveDrive then return end

        stoppingActiveDrive = true
        activeDriveSoundReady = false
        activeDriveSound:setVolume( activeDriveData.SlowVolume, soundUpdateInterval )
        activeDriveSound:setPitch( activeDriveData.SlowPitch, soundUpdateInterval )
        timer.remove( "LKL_CarCon_ActiveDriveSoundReady" )

        timer.create( "LKL_CarCon_StopActiveDriveSound", activeDriveData.FadeOutDelay, 1, function()
            timer.create( "LKL_CarCon_StopActiveDriveSound", activeDriveData.FadeOutTime, 1, function()
                stoppingActiveDrive = false
            end )

            if not isValid( base ) or not activeDriveSound:isPlaying() then return end

            activeDriveSound:stop( activeDriveData.FadeOutTime )
        end )

        return
    end

    if not activeDriveSound:isPlaying() then
        activeDriveSound:play()
        activeDriveSound:setVolume( 0 )
        activeDriveSound:setVolume( activeDriveData.SlowVolume, activeDriveData.FadeInTime )
        activeDriveSound:setPitch( activeDriveData.SlowPitch )

        activeDriveSoundReady = false

        timer.remove( "LKL_CarCon_StopActiveDriveSound" )
        timer.create( "LKL_CarCon_ActiveDriveSoundReady", activeDriveData.FadeInTime, 1, function()
            activeDriveSoundReady = true
        end )
    end

    if not activeDriveSoundReady then return end

    local slowSpeed = activeDriveData.SlowSpeed
    local fastSpeed = activeDriveData.FastSpeed
    local speedClamped = math.clamp( carSpeed, slowSpeed, fastSpeed )
    local frac = ( speedClamped - slowSpeed ) / ( fastSpeed - slowSpeed )

    local slowVolume = activeDriveData.SlowVolume
    local fastVolume = activeDriveData.FastVolume
    local slowPitch = activeDriveData.SlowPitch
    local fastPitch = activeDriveData.FastPitch

    activeDriveSound:setVolume( slowVolume + ( fastVolume - slowVolume ) * frac, soundUpdateInterval )
    activeDriveSound:setPitch( slowPitch + ( fastPitch - slowPitch ) * frac, soundUpdateInterval )
end )

if wheelPropertyEnabled then
    timer.create( "LKL_CarCon_CheckWheelProperty", 0.5, 0, checkWheelProperty )
end
