--@name IK
--@author legokidlogan
--@shared

-- Inverse Kinematics library

libIK = libIK or {}
if libIK._alreadyLoaded then return end
libIK._alreadyLoaded = true

-- CONFIG DEFAULTS
libIK.FABRIK_TOLERANCE = libIK.FABRIK_TOLERANCE or 1.5
libIK.FABRIK_MAX_ITERATIONS = libIK.FABRIK_MAX_ITERATIONS or 10
-- END CONFIG DEFAULTS


local VECTOR_ZERO = Vector( 0, 0, 0 )
local ANGLE_ZERO = Angle( 0, 0, 0 )

local mSqrt = math.sqrt
local mCos = math.cos
local mASin = math.asin
local mAbs = math.abs

local localToWorldVector
local worldToLocalVector
local getOBBSize
local getIKOffset
local getVariedOrigin
local sanitizeIK
local getIKBendFromTilt
local determineSegmentEntPosAng
local fabrikForward
local fabrikBackward
local fabrikMoveSegment


----- SEGMENT SETUP -----

--[[
    - Generate a segment for use with 'ByTilt' IK functions and libIK.fabrikSegments().
    - This is not needed to use the core IK functions, but will generally improve results when working with entities and makes things easier.

    segmentData: (table)
        {
            Ent = ENTITY,                                  --                  -- The entity representing the segment.
            Parent = ENTITY,                               --                  -- The parent entity of the segment.

            OriginOffset = VECTOR (optional),              -- default:  0,0,0  -- The local position of the segment's origin.
            OriginOffsetScaled = VECTOR (optional),        -- default: -1,0,0  -- The local position of the segment's origin, will be scaled by obbSize() / 2.
            OriginOffsetFromParent = VECTOR or nil,        -- default:  nil    -- Creates a local offset from the parent, before adding the above two offsets in space local to the segment.
            OriginOffsetFromParentScaled = VECTOR or nil,  -- default:  nil    -- Same as above, but scaled by the parent.

            EndOffset = VECTOR (optional),                 -- default:  0,0,0  -- The local position of the segment's end.
            EndOffsetScaled = VECTOR (optional),           -- default:  1,0,0  -- The local position of the segment's end, will be scaled by obbSize() / 2.
            EndOffsetFromParent = VECTOR or nil,           -- default:  nil    -- Creates a local offset from the parent, before adding the above two offsets in space local to the segment.
            EndOffsetScaledFromParent = VECTOR or nil,     -- default:  nil    -- Same as above, but scaled by the parent.

            UpDir = VECTOR (optional),                     -- default:  0,1,0  -- The local up direction of the segment. (top of the thigh, top of the calf, back of the arm, etc.)
        }
        - Note that the '____OffsetFromParent' options will fundamentally change how offsets are calculated, use with caution.
            - The resulting offset will vary depending on how the semgent and its parent are located relative to each other when this gets called.
            - An example usecase for this would be if your segment entities are small cubes separated by large, possibly variable, gaps.
            - The regular offset options are in coords local to the segment entity, while the 'FromParent' options are in coords local to the parent entity.
--]]
function libIK.generateSegment( segmentData )
    local segmentEnt = segmentData.Ent
    if not isValid( segmentEnt ) then error( "Expected segmentData.Ent to be valid" ) end

    local parentEnt = segmentData.Parent
    if not isValid( parentEnt ) then error( "Expected segmentData.Parent to be valid" ) end

    local originOffset = getIKOffset(
        segmentEnt, parentEnt,
        segmentData.OriginOffset or Vector( 0, 0, 0 ), segmentData.OriginOffsetScaled or Vector( -1, 0, 0 ),
        segmentData.OriginOffsetFromParent, segmentData.OriginOffsetFromParentScaled
    )

    local endOffset = getIKOffset(
        segmentEnt, parentEnt,
        segmentData.EndOffset or Vector( 0, 0, 0 ), segmentData.EndOffsetScaled or Vector( 1, 0, 0 ),
        segmentData.EndOffsetFromParent, segmentData.EndOffsetScaledFromParent
    )

    local originToEnd = endOffset - originOffset
    local length = originToEnd:getLength()
    if length == 0 then error( "Segments cannot have a length of zero" ) end

    local forwardDir = originToEnd / length
    local upDir = segmentData.UpDir or Vector( 0, 1, 0 )

    local rightDir = forwardDir:cross( upDir )
    local rightDirLength = rightDir:getLength()
    if rightDirLength == 0 then error( "The forwards and upwards direction of a segment cannot be equal" ) end

    rightDir = rightDir / rightDirLength

    local offsetAng = forwardDir:getAngleEx( upDir )
    local originToEntPos, originToEntAng = worldToLocal( VECTOR_ZERO, ANGLE_ZERO, originOffset, offsetAng )

    return {
        -- Core data
        _ent = segmentEnt,
        _parentEnt = parentEnt,
        _length = length,
        _parentToOrigin = parentEnt:worldToLocal( segmentEnt:localToWorld( originOffset ) ),
        _parentToUpDir = worldToLocalVector( parentEnt, localToWorldVector( segmentEnt, upDir ) ),
        _parentToForwardDir = worldToLocalVector( parentEnt, localToWorldVector( segmentEnt, forwardDir ) ),
        _originToEntPos = originToEntPos,
        _originToEntAng = originToEntAng,

        -- Extra data for helper funcs
        _originOffset = originOffset,
        _endOffset = endOffset,
        _centerOffset = ( originOffset + endOffset ) / 2,
        _offsetAng = offsetAng,
        _forwardDir = forwardDir,
        _upDir = upDir,
        _rightDir = rightDir,
        _parentToRightDir = worldToLocalVector( parentEnt, localToWorldVector( segmentEnt, rightDir ) ),
    }
end

-- Generate multiple segments at once. Doesn't need to be a sequential table.
function libIK.generateSegments( segmentDatas )
    local segments = {}

    for k, segmentData in pairs( segmentDatas ) do
        segments[k] = libIK.generateSegment( segmentData )
    end

    return segments
end


----- SEGMENT HELPERS -----

function libIK.getSegmentEnt( segment )
    return segment._ent
end

function libIK.getSegmentParentEnt( segment )
    return segment._parentEnt
end

function libIK.getSegmentLength( segment )
    return segment._length
end

-- Gets the current world position of the segment's origin.
function libIK.getSegmentOrigin( segment )
    return segment._ent:localToWorld( segment._originOffset )
end

--[[
    - Gets the intended world position of the segment's origin.
    - Unless you manually reposition the segment or its parent, this should be the same as getSegmentOrigin().
--]]
function libIK.getSegmentOriginFromParent( segment )
    return segment._parentEnt:localToWorld( segment._parentToOrigin )
end

-- Gets the current world position of the segment's end.
function libIK.getSegmentEnd( segment )
    return segment._ent:localToWorld( segment._endOffset )
end

-- Gets the current world position of the segment's center.
function libIK.getSegmentCenter( segment )
    return segment._ent:localToWorld( segment._centerOffset )
end

-- Gets the current world angles of the segment.
function libIK.getSegmentAngles( segment )
    return segment._ent:localToWorldAngles( segment._offsetAng )
end

--[[
    - localToWorld() but for a segment.

    originType: (optional) (string)
        - Determines what position of the segment to use as the origin.
        - "origin" (default) - The segment's origin.
        - "end" - The segment's end.
        - "center" - The segment's center.
        - "ent" - The segment entity's position.
--]]
function libIK.localToWorldSegment( segment, pos, ang, originType )
    local originPos = getVariedOrigin( segment, originType )
    local originAng = libIK.getSegmentAngles( segment )

    return localToWorld( pos, ang, originPos, originAng )
end

--[[
    - worldToLocal() but for a segment.

    originType: (optional) (string)
        - Determines what position of the segment to use as the origin.
        - "origin" (default) - The segment's origin.
        - "end" - The segment's end.
        - "center" - The segment's center.
        - "ent" - The segment entity's position.
--]]
function libIK.worldToLocalSegment( segment, pos, ang, originType )
    local originPos = getVariedOrigin( segment, originType )
    local originAng = libIK.getSegmentAngles( segment )

    return worldToLocal( pos, ang, originPos, originAng )
end

function libIK.getSegmentForward( segment )
    return localToWorldVector( segment._ent, segment._forwardDir )
end

function libIK.getSegmentUp( segment )
    return localToWorldVector( segment._ent, segment._upDir )
end

function libIK.getSegmentRight( segment )
    return localToWorldVector( segment._ent, segment._rightDir )
end

function libIK.getSegmentForwardFromParent( segment )
    return localToWorldVector( segment._parentEnt, segment._parentToForwardDir )
end

function libIK.getSegmentUpFromParent( segment )
    return localToWorldVector( segment._parentEnt, segment._parentToUpDir )
end

function libIK.getSegmentRightFromParent( segment )
    return localToWorldVector( segment._parentEnt, segment._parentToRightDir )
end

-- For a desired origin position and angle of a segment, returns the position and angle that you will need to set onto the entity.
function libIK.convertSegmentPosAngToEntPosAng( segment, originPos, ang )
    return localToWorld( segment._originToEntPos, segment._originToEntAng, originPos, ang )
end


----- IK FUNCTIONS -----

--[[
    - Calculate the bendPos (elbow, knee, etc.) for a two-segment limb.

    startPos: (Vector)
        - The start position of the limb.
    endPos: (Vector)
        - The target end position of the limb.
    LA: (number)
        - The length of the first segment.
    LB: (number)
        - The length of the second segment.
    bendDir: (optional) (Vector)
        - The direction to bend in, perpendicular to lineDir.
        - If not provided, it will be auto-calculated but could yield unnatural results.
    lineDir: (optional) (Vector)
        - Equal to ( endPos - startPos ):getNormalized().
        - Only provide this if you have the value already, to reduce redundant calculations.
    L: (optional) (number)
        - Equal to ( endPos - startPos ):getLength().
        - Only provide this if you have the value already, to reduce redundant calculations.
    
    RETURNS: bendPos
        bendPos: (Vector or nil)
            - The position of the bend in the limb.
            - May be nil if the segments have different lengths and startPos is too close to endPos.
--]]
function libIK.twoSeg( startPos, endPos, LA, LB, bendDir, lineDir, L )
    endPos, bendDir, lineDir, L = sanitizeIK( startPos, endPos, LA, LB, bendDir, lineDir, L )

    local semiPerim = ( LA + LB + L ) / 2
    local boundingArea = 2 * mSqrt( mAbs( semiPerim * ( semiPerim - LA ) * ( semiPerim - LB ) * ( semiPerim - L ) ) )
    local LBend = boundingArea / L

    local thetaA = mASin( LBend / LA )
    if thetaA ~= thetaA then return end -- NaN check, happens if the segments are different length and startPos is too close to endPos.

    local LAProj = mCos( thetaA ) * LA

    local raiseFrom = startPos + lineDir * LAProj
    local bendPos = raiseFrom + bendDir * LBend

    return bendPos
end

--[[
    - Similar to libIK.twoSeg(), but calculates bendPos1 and bendPos2 for a three-segment limb.
    - Internally performs two-segment IK between segment A and a fake segment X, then again between bendPos1 and endPos with segments B and C.
    - Required args: startPos, endPos, LA, LB, LC, LX
    - Recommended args: bendDir1, bendDir2
    - Optional args: lineDir, L
--]]
function libIK.threeSeg( startPos, endPos, LA, LB, LC, LX, bendDir1, bendDir2, lineDir, L )
    local _
    _, bendDir1, lineDir, L = sanitizeIK( startPos, endPos, LA, LX, bendDir1, lineDir, L )

    local bendPos1 = libIK.twoSeg( startPos, endPos, LA, LX, bendDir1, lineDir, L )
    if not bendPos1 then return end
    local bendPos2 = libIK.twoSeg( bendPos1, endPos, LB, LC, bendDir2 )

    return bendPos1, bendPos2
end

--[[
    - Similar to libIK.threeSeg(), but calculates bendPos1, bendPos2, and bendPos3 for a four-segment limb.
    - Required args: startPos, endPos, LA, LB, LC, LD, LX1, LX2
    - Recommended args: bendDir1, bendDir2, bendDir3
    - Optional args: lineDir, L
--]]
function libIK.fourSeg( startPos, endPos, LA, LB, LC, LD, LX1, LX2, bendDir1, bendDir2, bendDir3, lineDir, L )
    local _
    _, bendDir1, lineDir, L = sanitizeIK( startPos, endPos, LA, LX1, bendDir1, lineDir, L )

    local bendPos1 = libIK.twoSeg( startPos, endPos, LA, LX1, bendDir1, lineDir, L )
    if not bendPos1 then return end
    local bendPos2, bendPos3 = libIK.threeSeg( bendPos1, endPos, LB, LC, LD, LX2, bendDir2, bendDir3 )

    return bendPos1, bendPos2, bendPos3
end


----- IK BY TILT FUNCTIONS -----

--[[
    - Similar to libIK.twoSeg(), but uses segment data which allows for more realistic IK and easer end-user implementation.

    segmentA: (table)
        - The first segment.
        - Should be generated with libIK.generateSegment().
    segmentB: (table)
        - The second segment.
        - Should be generated with libIK.generateSegment().
    endPos: (Vector)
        - The target end position of the limb.
    tiltDeg: (number)
        - How much to rotate the bendDir around lineDir.
        - 0 points to the right of lineDir, 90 points up, 180 points left, 270 points down.
        - For a humanoid model that starts in a T-pose, it's recommended to use 90 for legs, 0 for the right arm, and 180 for the left arm.
    applyImmediately: (optional) (boolean) (default: false)
        - Whether to apply the results immediately to the segment entities via :setPos() and :setAngles().

    RETURNS: startPos, bendPos, bendDir, segmentPosA, segmentAngA, segmentPosB, segmentAngB
        - May return nil if the parent entity of segmentA is invalid or endPos is unreasonable.
--]]
function libIK.twoSegByTilt( segmentA, segmentB, endPos, tiltDeg, applyImmediately )
    local parentEntA = segmentA._parentEnt
    if not isValid( parentEntA ) then return end

    local startPos = parentEntA:localToWorld( segmentA._parentToOrigin )
    local lineDir = endPos - startPos
    local L = lineDir:getLength()
    if L == 0 then return end

    lineDir = lineDir / L

    local LA = segmentA._length
    local LB = segmentB._length
    local bendDir = getIKBendFromTilt( segmentA, lineDir, tiltDeg )
    local bendPos = libIK.twoSeg( startPos, endPos, LA, LB, bendDir, lineDir, L )
    if not bendPos then return end

    local segmentPosA, segmentAngA = determineSegmentEntPosAng( segmentA, startPos, bendPos, bendDir )
    local segmentPosB, segmentAngB = determineSegmentEntPosAng( segmentB, bendPos, endPos, bendDir )

    if applyImmediately then
        local entA = segmentA._ent
        local entB = segmentB._ent

        entA:setPos( segmentPosA )
        entA:setAngles( segmentAngA )
        entB:setPos( segmentPosB )
        entB:setAngles( segmentAngB )
    end

    return startPos, bendPos, bendDir, segmentPosA, segmentAngA, segmentPosB, segmentAngB
end

--[[
    - libIK.twoSegByTilt() but for three segments.

    RETURNS: startPos, bendPos1, bendPos2, bendDir1, bendDir2, segmentPosA, segmentAngA, segmentPosB, segmentAngB, segmentPosC, segmentAngC
        - May return nil if the parent entity of segmentA is invalid or endPos is unreasonable.
--]]
function libIK.threeSegByTilt( segmentA, segmentB, segmentC, endPos, LX, tiltDeg1, tiltDeg2, applyImmediately )
    if LX <= 0 then return end

    local parentEntA = segmentA._parentEnt
    if not isValid( parentEntA ) then return end

    local startPos = parentEntA:localToWorld( segmentA._parentToOrigin )
    local lineDir1 = endPos - startPos
    local L = lineDir1:getLength()
    if L == 0 then return end

    lineDir1 = lineDir1 / L

    local LA = segmentA._length
    local LB = segmentB._length
    local LC = segmentC._length
    local bendDir1 = getIKBendFromTilt( segmentA, lineDir1, tiltDeg1 )
    local bendPos1 = libIK.twoSeg( startPos, endPos, LA, LX, bendDir1, lineDir1, L )
    if not bendPos1 then return end

    local lineDir2 = ( endPos - bendPos1 ) / LX
    local bendDir2 = getIKBendFromTilt( segmentB, lineDir2, tiltDeg2 )
    local bendPos2 = libIK.twoSeg( bendPos1, endPos, LB, LC, bendDir2, lineDir2, LX )
    if not bendPos2 then return end

    local segmentPosA, segmentAngA = determineSegmentEntPosAng( segmentA, startPos, bendPos1, bendDir1 )
    local segmentPosB, segmentAngB = determineSegmentEntPosAng( segmentB, bendPos1, bendPos2, bendDir2 )
    local segmentPosC, segmentAngC = determineSegmentEntPosAng( segmentC, bendPos2, endPos, bendDir2 )

    if applyImmediately then
        local entA = segmentA._ent
        local entB = segmentB._ent
        local entC = segmentC._ent

        entA:setPos( segmentPosA )
        entA:setAngles( segmentAngA )
        entB:setPos( segmentPosB )
        entB:setAngles( segmentAngB )
        entC:setPos( segmentPosC )
        entC:setAngles( segmentAngC )
    end

    return startPos, bendPos1, bendPos2, bendDir1, bendDir2, segmentPosA, segmentAngA, segmentPosB, segmentAngB, segmentPosC, segmentAngC
end

--[[
    - libIK.twoSegByTilt() but for four segments.

    RETURNS: startPos, bendPos1, bendPos2, bendPos3, bendDir1, bendDir2, bendDir3, segmentPosA, segmentAngA, segmentPosB, segmentAngB, segmentPosC, segmentAngC, segmentPosD, segmentAngD
        - May return nil if the parent entity of segmentA is invalid or endPos is unreasonable.
--]]
function libIK.fourSegByTilt( segmentA, segmentB, segmentC, segmentD, endPos, LX1, LX2, tiltDeg1, tiltDeg2, tiltDeg3, applyImmediately )
    if LX1 <= 0 or LX2 <= 0 then return end

    local parentEntA = segmentA._parentEnt
    if not isValid( parentEntA ) then return end

    local startPos = parentEntA:localToWorld( segmentA._parentToOrigin )
    local lineDir1 = endPos - startPos
    local L = lineDir1:getLength()
    if L == 0 then return end

    lineDir1 = lineDir1 / L

    local LA = segmentA._length
    local LB = segmentB._length
    local LC = segmentC._length
    local LD = segmentD._length
    local bendDir1 = getIKBendFromTilt( segmentA, lineDir1, tiltDeg1 )
    local bendPos1 = libIK.twoSeg( startPos, endPos, LA, LX1, bendDir1, lineDir1, L )
    if not bendPos1 then return end

    local lineDir2 = ( endPos - bendPos1 ) / LX1
    local bendDir2 = getIKBendFromTilt( segmentB, lineDir2, tiltDeg2 )
    local bendPos2 = libIK.twoSeg( bendPos1, endPos, LB, LC, bendDir2, lineDir2, LX1 )
    if not bendPos2 then return end

    local lineDir3 = ( endPos - bendPos2 ) / LX2
    local bendDir3 = getIKBendFromTilt( segmentC, lineDir3, tiltDeg3 )
    local bendPos3 = libIK.twoSeg( bendPos2, endPos, LC, LD, bendDir3, lineDir3, LX2 )
    if not bendPos3 then return end

    local segmentPosA, segmentAngA = determineSegmentEntPosAng( segmentA, startPos, bendPos1, bendDir1 )
    local segmentPosB, segmentAngB = determineSegmentEntPosAng( segmentB, bendPos1, bendPos2, bendDir2 )
    local segmentPosC, segmentAngC = determineSegmentEntPosAng( segmentC, bendPos2, bendPos3, bendDir3 )
    local segmentPosD, segmentAngD = determineSegmentEntPosAng( segmentD, bendPos3, endPos, bendDir3 )

    if applyImmediately then
        local entA = segmentA._ent
        local entB = segmentB._ent
        local entC = segmentC._ent
        local entD = segmentD._ent

        entA:setPos( segmentPosA )
        entA:setAngles( segmentAngA )
        entB:setPos( segmentPosB )
        entB:setAngles( segmentAngB )
        entC:setPos( segmentPosC )
        entC:setAngles( segmentAngC )
        entD:setPos( segmentPosD )
        entD:setAngles( segmentAngD )
    end

    return startPos, bendPos1, bendPos2, bendPos3, bendDir1, bendDir2, bendDir3, segmentPosA, segmentAngA, segmentPosB, segmentAngB, segmentPosC, segmentAngC, segmentPosD, segmentAngD
end

--[[
    - Solves for an arbitrary number of segments using FABRIK.
        - FABRIK uses a repeating, iterative technique, and thus will be less performant.
        - However, FABRIK is more generalized, needs fewer inputs, and gives more realistic results for 3+ segments.

    rootPos: (Vector)
        - The start position of the limb.
    targetPos: (Vector)
        - The target end position of the limb.
    lengths: (table)
        - A list of lengths for each segment.
    segmentEndsOrTilt: (table or number)
        - TABLE:
            - A list of the current end positions of each segment.
            - Will get modified in-place.
        - NUMBER:
            - How much to rotate the first bend direction around lineDir (the direction between targetPos and rootPos).
            - 0 points to the right of lineDir, 90 points up, 180 points left, 270 points down.
            - For a humanoid model that starts in a T-pose, it's recommended to use 90 for legs, 0 for the right arm, and 180 for the left arm.
    upDir: (optional) (Vector)
        - The up direction of the first segment, used when segmentEndsOrTilt is a number.

    RETURNS: segmentEnds, bendDir
        segmentEnds: (table)
            - The new end positions of each segment.
            - Will be the same as the original segmentEndsOrTilt if it was a table.
        bendDir: (Vector or nil)
            - The first segment's bend direction.
            - Only provided if segmentEndsOrTilt was a number.
--]]
function libIK.fabrik( rootPos, targetPos, lengths, segmentEndsOrTilt, upDir )
    local segmentEnds
    local segCount = #lengths
    local bendDir

    -- Given tilt instead of segment end positions.
    if type( segmentEndsOrTilt ) == "number" then
        local tiltDeg = segmentEndsOrTilt
        local toTarget = targetPos - rootPos
        bendDir = upDir and toTarget:getAngleEx( upDir ) or toTarget:getAngle()
        bendDir = bendDir:getRight():rotateAroundAxis( toTarget, -tiltDeg )
        local prevPos = rootPos

        segmentEnds = {}

        for i = 1, segCount do
            prevPos = prevPos + bendDir * lengths[i]
            segmentEnds[i] = prevPos
        end
    else
        segmentEnds = segmentEndsOrTilt
    end

    local toleranceSqr = libIK.FABRIK_TOLERANCE
    toleranceSqr = toleranceSqr * toleranceSqr

    for _ = 1, libIK.FABRIK_MAX_ITERATIONS do
        fabrikForward( targetPos, lengths, segmentEnds, segCount )
        fabrikBackward( rootPos, lengths, segmentEnds, segCount )

        if segmentEnds[segCount]:getDistanceSqr( targetPos ) < toleranceSqr then
            break
        end
    end

    return segmentEnds, bendDir
end

--[[
    - A FABRIK solver that uses segments created with libIK.generateSegment().
    - Unlike the 'ByTilt' functions, this will always apply the results immediately to the segment entities.

    targetPos: (Vector)
        - The target end position of the limb.
    segments: (table)
        - A list of segments.
    tiltDeg: (optional) (number) (default: 90)
        - How much to rotate the first bend direction around lineDir.
        - 0 points to the right of lineDir, 90 points up, 180 points left, 270 points down.
        - For a humanoid model that starts in a T-pose, it's recommended to use 90 for legs, 0 for the right arm, and 180 for the left arm.
--]]
function libIK.fabrikSegments( targetPos, segments, tiltDeg )
    local segmentA = segments[1]
    local parentEntA = segmentA._parentEnt
    if not isValid( parentEntA ) then return end

    tiltDeg = tiltDeg or 90

    local rootPos = parentEntA:localToWorld( segmentA._parentToOrigin )
    local lengths = {}

    for i, segment in ipairs( segments ) do
        lengths[i] = segment._length
    end

    local upA = libIK.getSegmentUpFromParent( segmentA )
    local segmentEnds = libIK.fabrik( rootPos, targetPos, lengths, tiltDeg, upA )
    local prevPos = rootPos

    for i, segment in ipairs( segments ) do
        local endPos = segmentEnds[i]
        local toEnd = ( endPos - prevPos )

        -- If we used up directly, then toEnd being aimed slightly above/below the segment's initial forwards direction will cause flip-flopping.
        -- This method is (hopefully) more reliable.
        -- TODO: Test against arm-style segments instead of just legs.
        local right = libIK.getSegmentRightFromParent( segment )
        local up = right:cross( toEnd )

        local ang = toEnd:getAngleEx( up )
        local entPos, entAng = libIK.convertSegmentPosAngToEntPosAng( segment, prevPos, ang )

        local ent = segment._ent
        ent:setPos( entPos )
        ent:setAngles( entAng )

        prevPos = endPos
    end
end


----- PRIVATE FUNCTIONS -----

localToWorldVector = function( ent, vec )
    return ent:localToWorld( vec ) - ent:getPos()
end

worldToLocalVector = function( ent, vec )
    return ent:worldToLocal( vec + ent:getPos() )
end

getOBBSize = function( ent )
    local obbSize = ent:obbSize()

    if ent.getScale then
        obbSize = obbSize * ent:getScale()
    end

    return obbSize
end

getIKOffset = function( ent, parent, offset, offsetScaled, offsetFromParent, offsetFromParentScaled )
    local obbSizeHalf = getOBBSize( ent ) / 2

    offset = offset + offsetScaled * obbSizeHalf

    if offsetFromParent or offsetFromParentScaled then
        if not offsetFromParent then
            offsetFromParent = VECTOR_ZERO
        end

        if offsetFromParentScaled then
            local obbSizeParentHalf = getOBBSize( parent ) / 2

            offsetFromParent = offsetFromParent + offsetFromParentScaled * obbSizeParentHalf
        end

        offset = offset + ent:worldToLocal( parent:localToWorld( offsetFromParent ) )
    end

    return offset
end

getVariedOrigin = function( segment, originType )
    originType = originType or "origin"

    if originType == "origin" then
        return libIK.getSegmentOrigin( segment )
    elseif originType == "end" then
        return libIK.getSegmentEnd( segment )
    elseif originType == "center" then
        return libIK.getSegmentCenter( segment )
    elseif originType == "ent" then
        return segment._ent:getPos()
    end

    error( "Invalid originType" )
end

sanitizeIK = function( startPos, endPos, LA, LB, bendDir, lineDir, L )
    L = L or startPos:getDistance( endPos )
    lineDir = lineDir or ( endPos - startPos ) / L
    bendDir = bendDir or lineDir:getAngle():getRight()

    local LMax = LA + LB

    if L > LMax then
        L = LMax
        endPos = startPos + lineDir * L
    end

    return endPos, bendDir, lineDir, L
end

getIKBendFromTilt = function( segment, lineDir, tiltDeg )
    local parentEnt = segment._parentEnt
    local upDir = localToWorldVector( parentEnt, segment._parentToUpDir )
    upDir = upDir:rotateAroundAxis( lineDir, -tiltDeg )

    local bendDir = lineDir:cross( upDir )
    local bendDirLengthSqr = bendDir:getLengthSqr()

    -- Ensure bendDir is a unit vector.
    if bendDirLengthSqr ~= 1 then
        -- Fallback option if upDir == lineDir.
        if bendDirLengthSqr == 0 then
            local forwardDir = localToWorldVector( parentEnt, segment._parentToForwardDir )
            forwardDir = forwardDir:rotateAroundAxis( lineDir, tiltDeg + 90 )

            -- In such cases, forwardDir and lineDir are guaranteed to be perpendicular, so crossing them is always length 1.
            return lineDir:cross( forwardDir )
        end

        bendDir = bendDir / mSqrt( bendDirLengthSqr )
    end

    return bendDir
end

determineSegmentEntPosAng = function( segment, targetStartPos, targetEndPos, bendDir )
    local targetDir = targetEndPos - targetStartPos -- targetAng should point in this direction, but we need upDir as well.
    local targetUp = targetDir:cross( bendDir ):cross( targetDir ) -- targetDir, bendDir, and upDir are all in the same plane, so cross twice to find upDir.
    local targetAng = targetDir:getAngleEx( targetUp )

    -- Account for ik offsets.
    return localToWorld( segment._originToEntPos, segment._originToEntAng, targetStartPos, targetAng )
end

fabrikForward = function( targetPos, lengths, segmentEnds, segCount )
    local prevPos = targetPos
    local prevLength = lengths[segCount]
    segmentEnds[segCount] = prevPos

    for i = segCount - 1, 1, -1 do
        prevPos = fabrikMoveSegment( segmentEnds[i], prevPos, prevLength )
        prevLength = lengths[i]
        segmentEnds[i] = prevPos
    end
end

fabrikBackward = function( rootPos, lengths, segmentEnds, segCount )
    local prevPos = fabrikMoveSegment( segmentEnds[1], rootPos, lengths[1] )
    segmentEnds[1] = prevPos

    for i = 2, segCount do
        prevPos = fabrikMoveSegment( segmentEnds[i], prevPos, lengths[i] )
        segmentEnds[i] = prevPos
    end
end

fabrikMoveSegment = function( oldPos, newPos, length )
    return newPos - ( newPos - oldPos ):getNormalized() * length
end
