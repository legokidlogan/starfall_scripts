--@name Starfall Error Viewer
--@author legokidlogan
--@shared
--@include lkl/render/poly_tools.txt
--@include lkl/gcolors.txt

if SERVER then
    require( "lkl/gcolors.txt" )


    local active = true


    hook.add( "PlayerSay", "LKL_SEV_ToggleActive", function( ply, msg )
        if ply ~= owner() then return end

        local args = string.split( msg, " " )
        local prefix = table.remove( args, 1 )

        if prefix ~= "/sev" then return end

        -- Currently only one command and no args: toggling the active state.
        active = not active

        print(
            c_white, "[SEV] ",
            c_white, "Error viewer is now ",
            active and c_pale_green or c_pale_red, active and "active" or "inactive"
        )

        net.start( "LKL_SEV_SetActive" )
        net.writeBool( active )
        net.send( ply )

        return ""
    end )


    net.receive( "LKL_SEV_MakeChipSolid", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        if ent:getCollisionGroup() == COLLISION_GROUP.IN_VEHICLE then
            ent:setCollisionGroup( COLLISION_GROUP.NONE )
        end

        if not ent:isSolid() then
            ent:setSolid( true )
        end
    end )

    net.receive( "LKL_SEV_SetPos", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        ent:setPos( net.readVector() )
    end )

    net.receive( "LKL_SEV_RestartChip", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        local success, err = pcall( function()
            restart( ent )
        end )

        if not success then
            if type( err ) == "table" then
                err = err.msg
            end

            print(
                c_white, "[SEV] ",
                c_alert_red, "Error restarting chip on server: ",
                c_pale_yellow, err
            )

            return
        end

        net.start( "LKL_SEV_RestartSucceeded" )
        net.writeEntity( ent )
        net.send( ply )
    end )

    return
end

if player() ~= owner() then return end

require( "lkl/render/poly_tools.txt" )
require( "lkl/gcolors.txt" )


-- CONFIG:
local diamondSize = 20
local diamondThickness = 0.15
local chipNameFontSize = 16
local chipNameFontOutline = true
local chipNameTextColor = Color( 255, 200, 200, 255 )
local returnDiamondColor = Color( 255, 255, 255, 255 )
local restartChipKeyCombo = { KEY.LCONTROL, KEY.R } -- Set to false to disable. Looking at an errored chip (through walls) and pressing these keys together will restart it in both realms.
local makeChipSolidKey = KEY.E -- Set to false to disable. Looking at an errored chip (through walls) that's invisible to traces (PropNotSolid or COLLISION_GROUP_IN_VEHICLE) and pressing this key will re-solidify it.
local toggleBringChipKey = KEY.G -- Set to false to disable. Loking at an errored chip (through walls) and pressing this key will bring it to you or teleport it back. The chip can be sent back even if it is no longer errored.
local clearChipReturnKey = KEY.H -- Set to false to disable. Used for clearing the return position of a chip that has been brought to you.
-- END CONFIG


local IN_KEY_ATTACK = IN_KEY.ATTACK
local IN_KEY_RELOAD = IN_KEY.RELOAD

local active = true
local erroredChips = {}
local erroredChipDatas = {}
local returnableChips = {}
local restartChipKeyComboLookup = {}
local diamondPolyLeft = nil
local diamondPolyRight = nil
local diamondPolySmallLeft = nil
local diamondPolySmallRight = nil
local chipNameOffsetY = -( diamondSize * 0.5 + chipNameFontSize * 1 + 2 )
local chipNameFont = render.createFont( "Roboto Mono", chipNameFontSize, 500, true, false, false, chipNameFontOutline, false, false )


local function addErroredChip( ent, isServer )
    local data = erroredChipDatas[ent]

    if not data then
        data = {
            OnServer = false,
            OnClient = false,
            ChipName = ent:getChipName(),
        }
        erroredChipDatas[ent] = data
        table.insert( erroredChips, ent )
    end

    if isServer then
        data.OnServer = true
    else
        data.OnClient = true
    end
end

local function removeErroredChip( ent, i )
    erroredChipDatas[ent] = nil

    if i then
        table.remove( erroredChips, i )
    else
        table.removeByValue( erroredChips, ent )
    end
end

local function screenTrace( targets, pixelRadius )
    local origin = eyePos()
    local closestEnt = nil
    local closestDistSqr = math.huge
    local pixelRadiusSqr = pixelRadius ^ 2

    local scrW, scrH = render.getGameResolution()
    local scrOffset = Vector( -scrW * 0.5, -scrH * 0.5, 0 )

    for _, ent in ipairs( targets ) do
        local pos = ent:getPos()
        local distSqr = origin:getDistanceSqr( pos )

        if distSqr < closestDistSqr then
            local screenPos = pos:toScreen()

            if screenPos.visible and ( Vector( screenPos.x, screenPos.y, 0 ) + scrOffset ):getLengthSqr() < pixelRadiusSqr then
                closestEnt = ent
                closestDistSqr = distSqr
            end
        end
    end

    return closestEnt
end

local function drawChipError( ent )
    local data = erroredChipDatas[ent]
    local onServer = data.OnServer
    local onClient = data.OnClient
    local onShared = onServer and onClient

    local screenPos = ent:getPos():toScreen()
    if not screenPos.visible then return end

    local centerX = screenPos.x
    local centerY = screenPos.y

    render.setFont( chipNameFont )
    render.setColor( chipNameTextColor )
    render.drawSimpleText( centerX, centerY + chipNameOffsetY, data.ChipName, 1, 3 )

    if onShared then
        render.setColor( c_realm_server )
        polyTools.drawPolyUnscaled( diamondPolyLeft, centerX, centerY )

        render.setColor( c_realm_client )
        polyTools.drawPolyUnscaled( diamondPolyRight, centerX, centerY )
    elseif onServer then
        render.setColor( c_realm_server )
        polyTools.drawPolyUnscaled( diamondPolyLeft, centerX, centerY )
        polyTools.drawPolyUnscaled( diamondPolyRight, centerX, centerY )
    else
        render.setColor( c_realm_client )
        polyTools.drawPolyUnscaled( diamondPolyLeft, centerX, centerY )
        polyTools.drawPolyUnscaled( diamondPolyRight, centerX, centerY )
    end
end

local function drawSmallDiamond( worldPos )
    local screenPos = worldPos:toScreen()
    if not screenPos.visible then return end

    local centerX = screenPos.x
    local centerY = screenPos.y

    polyTools.drawPolyUnscaled( diamondPolySmallLeft, centerX, centerY )
    polyTools.drawPolyUnscaled( diamondPolySmallRight, centerX, centerY )
end


hook.add( "StarfallError", "LKL_SEV_TrackClientError", function( ent, ply )
    local isServer = ply == game.getWorld()

    if not isServer and ply ~= owner() then return end
    if not isValid( ent ) then return end
    if ent:getOwner() ~= owner() then return end

    addErroredChip( ent, isServer )
end )

hook.add( "KeyPress", "LKL_SEV_RemoveChipsWhenRefreshed", function( ply, key )
    if not isFirstTimePredicted() then return end
    if key ~= IN_KEY_ATTACK and key ~= IN_KEY_RELOAD then return end

    local wep = ply:getActiveWeapon()
    if not isValid( wep ) or wep:getClass() ~= "gmod_tool" then return end
    if wep:getToolMode() ~= "starfall_processor" then return end

    local ent = ply:getEyeTrace().Entity
    if not isValid( ent ) or ent:getClass() ~= "starfall_processor" then return end
    if ent:getOwner() ~= ply then return end

    removeErroredChip( ent )
end )

hook.add( "inputPressed", "LKL_SEV_KeyPress", function( key )
    if not active then return end
    if not isFirstTimePredicted() then return end

    if key == makeChipSolidKey then
        local ent = screenTrace( erroredChips, diamondSize )
        if not ent then return end

        net.start( "LKL_SEV_MakeChipSolid" )
        net.writeEntity( ent )
        net.send()
    elseif key == toggleBringChipKey then
        local targets = table.copy( erroredChips )
        table.add( targets, returnableChips )

        local ent = screenTrace( targets, diamondSize * 0.5 )
        if not ent then return end

        local returnPos = ent._sev_ReturnPos
        local desPos = nil

        if returnPos then
            desPos = returnPos
            ent._sev_ReturnPos = nil
            table.removeByValue( returnableChips, ent )
        else
            desPos = eyePos() + eyeAngles():getForward() * 50
            ent._sev_ReturnPos = ent:getPos()
            table.insert( returnableChips, ent )
        end

        net.start( "LKL_SEV_SetPos" )
        net.writeEntity( ent )
        net.writeVector( desPos )
        net.send()
    elseif key == clearChipReturnKey then
        local ent = screenTrace( returnableChips, diamondSize * 0.5 )
        if not ent then return end

        ent._sev_ReturnPos = nil
        table.removeByValue( returnableChips, ent )
    end
end )

hook.add( "inputPressed", "LKL_SEV_KeyPress_RestartChipCombo", function( key )
    if not active then return end
    if not isFirstTimePredicted() then return end
    if not restartChipKeyComboLookup[key] then return end

    for _, comboKey in ipairs( restartChipKeyCombo ) do
        if not input.isKeyDown( comboKey ) then return end
    end

    local ent = screenTrace( erroredChips, diamondSize )
    if not ent then return end

    local success, err = pcall( function()
        restart( ent )
    end )

    if not success then
        if type( err ) == "table" then
            err = err.msg
        end

        print(
            c_white, "[SEV] ",
            c_alert_red, "Error restarting chip: ",
            c_pale_yellow, err
        )

        return
    end

    local errorData = erroredChipDatas[ent]

    if errorData.OnServer then
        net.start( "LKL_SEV_RestartChip" )
        net.writeEntity( ent )
        net.send()
    else
        removeErroredChip( ent )
    end
end )

hook.add( "EntityRemoved", "LKL_SEV_RemoveDeletedChips", function( ent )
    if not erroredChipDatas[ent] then return end

    removeErroredChip( ent )
end )

hook.add( "drawhud", "LKL_SEV_DrawChipErrors", function()
    if not active then return end

    for i = #erroredChips, 1, -1 do
        local ent = erroredChips[i]

        if not ent:isValid() then
            removeErroredChip( ent, i )
        else
            drawChipError( ent )
        end
    end

    render.setColor( returnDiamondColor )

    for i = #returnableChips, 1, -1 do
        local ent = returnableChips[i]

        if not ent:isValid() then
            table.remove( returnableChips, i )
        else
            drawSmallDiamond( ent:getPos() )
        end
    end
end )


net.receive( "LKL_SEV_SetActive", function()
    active = net.readBool()
end )

net.receive( "LKL_SEV_RestartSucceeded", function()
    local ent = net.readEntity()
    if not isValid( ent ) then return end

    removeErroredChip( ent )
end )


do
    diamondPolyLeft = polyTools.polyScale( {
        { x = -0.5, y = 0 },
        { x = 0, y = -0.5 },
        { x = 0, y = -0.5 + diamondThickness },
        { x = -0.5 + diamondThickness, y = 0 },
        { x = 0, y = 0.5 - diamondThickness },
        { x = 0, y = 0.5 },
    }, diamondSize, diamondSize )

    diamondPolyRight = polyTools.polyScale( {
        { x = 0.5, y = 0 },
        { x = 0, y = 0.5 },
        { x = 0, y = 0.5 - diamondThickness },
        { x = 0.5 - diamondThickness, y = 0 },
        { x = 0, y = -0.5 + diamondThickness },
        { x = 0, y = -0.5 },
    }, diamondSize, diamondSize )

    diamondPolySmallLeft = polyTools.polyScale( diamondPolyLeft, 0.5, 0.5 )
    diamondPolySmallRight = polyTools.polyScale( diamondPolyRight, 0.5, 0.5 )


    for _, key in ipairs( restartChipKeyCombo ) do
        restartChipKeyComboLookup[key] = true
    end


    enableHud( player(), true )
end
