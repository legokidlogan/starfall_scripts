--@name Starfall Error Viewer
--@author legokidlogan
--@shared
--@include lkl/hud_button_diamond.txt
--@include lkl/gcolors.txt

if SERVER then
    require( "lkl/gcolors.txt" )


    local active = true


    hook.add( "PlayerSay", "LKL_SEV_ToggleActive", function( ply, msg )
        if ply ~= owner() then return end

        local args = string.split( msg, " " )
        local prefix = table.remove( args, 1 )

        if prefix ~= "/sev" then return end

        -- Currently only one command and no args: toggling the active state.
        active = not active

        print(
            c_white, "[SEV] ",
            c_white, "Error viewer is now ",
            active and c_pale_green or c_pale_red, active and "active" or "inactive"
        )

        net.start( "LKL_SEV_SetActive" )
        net.writeBool( active )
        net.send( ply )

        return ""
    end )


    net.receive( "LKL_SEV_MakeChipSolid", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        if ent:getCollisionGroup() == COLLISION_GROUP.IN_VEHICLE then
            ent:setCollisionGroup( COLLISION_GROUP.NONE )
        end

        if not ent:isSolid() then
            ent:setSolid( true )
        end
    end )

    net.receive( "LKL_SEV_SetPos", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        ent:setPos( net.readVector() )
    end )

    net.receive( "LKL_SEV_RestartChip", function( _, ply )
        if ply ~= owner() then return end

        local ent = net.readEntity()
        if not isValid( ent ) then return end

        local success, err = pcall( function()
            restart( ent )
        end )

        if not success then
            if type( err ) == "table" then
                err = err.msg
            end

            print(
                c_white, "[SEV] ",
                c_alert_red, "Error restarting chip on server: ",
                c_pale_yellow, err
            )

            return
        end

        net.start( "LKL_SEV_RestartSucceeded" )
        net.writeEntity( ent )
        net.send( ply )
    end )

    return
end

if player() ~= owner() then return end

require( "lkl/hud_button_diamond.txt" )
require( "lkl/gcolors.txt" )


-- CONFIG:
local diamondRadius = 20
local diamondThickness = 0.3
local diamondInnerScale = 0.4
local chipNameFontSize = 16
local chipNameFontOutline = true
local chipNameTextColor = Color( 255, 200, 200, 255 )
local returnDiamondColor = Color( 255, 255, 255, 255 )
local returnDiamondHoveredColor = Color( 255, 255, 100, 255 )
local restartChipKeyCombo = { KEY.LCONTROL, KEY.R } -- Set to false to disable. Looking at an errored chip (through walls) and pressing these keys together will restart it in both realms.
local makeChipSolidKey = KEY.E -- Set to false to disable. Looking at an errored chip (through walls) that's invisible to traces (PropNotSolid or COLLISION_GROUP_IN_VEHICLE) and pressing this key will re-solidify it.
local toggleBringChipKey = KEY.G -- Set to false to disable. Loking at an errored chip (through walls) and pressing this key will bring it to you or teleport it back. The chip can be sent back even if it is no longer errored.
local clearChipReturnKey = KEY.H -- Set to false to disable. Used for clearing the return position of a chip that has been brought to you.
-- END CONFIG


local IN_KEY_ATTACK = IN_KEY.ATTACK
local IN_KEY_RELOAD = IN_KEY.RELOAD

local active = true
local erroredChipDatas = {}
local restartChipKeyComboLookup = {}
local chipNameFont = render.createFont( "Roboto Mono", chipNameFontSize, 500, true, false, false, chipNameFontOutline, false, false )


local function removeErroredChip( ent )
    local chipData = erroredChipDatas[ent]

    if chipData then
        if isValid( chipData.RestartButton ) then
            chipData.RestartButton:destroy()
            chipData.RestartButton = nil
        end

        if isValid( chipData.ReturnButton ) then
            chipData.ReturnButton:destroy()
            chipData.ReturnButton = nil
        end
    end

    erroredChipDatas[ent] = nil
end

local function restartChip( ent )
    local success, err = pcall( function()
        restart( ent )
    end )

    if not success then
        if type( err ) == "table" then
            err = err.msg
        end

        print(
            c_white, "[SEV] ",
            c_alert_red, "Error restarting chip: ",
            c_pale_yellow, err
        )

        return
    end

    local chipData = erroredChipDatas[ent] or {}
    local returnButton = chipData.ReturnButton

    if returnButton then
        returnButton:splitOff()
    end

    if chipData.OnServer then
        net.start( "LKL_SEV_RestartChip" )
        net.writeEntity( ent )
        net.send()
    else
        removeErroredChip( ent )
    end
end

local function toggleBring( ent, chipData )
    local returnPos = ent._sev_ReturnPos
    local desPos = nil
    local returnButton = chipData.ReturnButton

    if returnPos then
        desPos = returnPos
        ent._sev_ReturnPos = nil

        if ent._sev_ReturnButton == returnButton then
            ent._sev_ReturnButton = nil
            returnButton:destroy()
        else
            returnButton:setVisible( false )
        end
    else
        desPos = eyePos() + eyeAngles():getForward() * 50
        ent._sev_ReturnPos = ent:getPos()

        returnButton:setPos( ent._sev_ReturnPos )
        returnButton:setVisible( true )
    end

    net.start( "LKL_SEV_SetPos" )
    net.writeEntity( ent )
    net.writeVector( desPos )
    net.send()
end

local function clearReturn( ent, chipData )
    local returnButton = chipData.ReturnButton

    ent._sev_ReturnPos = nil

    if ent._sev_ReturnButton == returnButton then
        ent._sev_ReturnButton = nil
        returnButton:destroy()
    else
        returnButton:setVisible( false )
    end
end

local function makeRestartButton( ent, chipData )
    local hudButton = HUDButtonDiamond:new( ent:getPos(), false )
    hudButton:setParent( ent )
    hudButton:setRadius( diamondRadius )
    hudButton:setThickness( diamondThickness )
    hudButton:setFont( chipNameFont )
    hudButton:setTextAnchor( TEXT_ALIGN.TOP )
    hudButton:setTextAlignX( TEXT_ALIGN.CENTER )
    hudButton:setTextAlignY( TEXT_ALIGN.TOP )
    hudButton:setTextMargin( 3 )
    hudButton:setTextSpacing( 0 )
    hudButton:setColorToggleOff( Color( 0, 0, 0, 0 ) )
    hudButton:setColorToggleOffHovered( Color( 255, 255, 255, 255 ) )
    hudButton:setUseTopBottom( false )
    hudButton:setInnerScale( diamondInnerScale )

    hudButton:setText( {
        chipNameTextColor, ent:getChipName(),
    } )

    function hudButton:canShowLinked()
        return active
    end

    function hudButton:getInnerScale()
        if not self:isHovered() then return 1 end

        return self.class.getInnerScale( self )
    end

    function hudButton:inputClk( _ply, key, state )
        if not state then return end

        if restartChipKeyComboLookup[key] then
            local restarting = true

            for _, comboKey in ipairs( restartChipKeyCombo ) do
                if not input.isKeyDown( comboKey ) then
                    restarting = false
                    break
                end
            end

            if restarting then
                restartChip( ent )

                return
            end
        end

        if key == makeChipSolidKey then
            net.start( "LKL_SEV_MakeChipSolid" )
            net.writeEntity( ent )
            net.send()
        elseif key == toggleBringChipKey then
            toggleBring( ent, chipData )
        elseif key == clearChipReturnKey then
            clearReturn( ent, chipData )
        end
    end

    return hudButton
end

local function makeReturnButton( ent, chipData )
    if isValid( ent._sev_ReturnButton ) then
        ent._sev_ReturnButton:destroy()
        ent._sev_ReturnButton = nil
    end

    local hudButton = HUDButtonDiamond:new( ent._sev_ReturnPos or ent:getPos(), false )
    hudButton:setRadius( diamondRadius * 0.5 )
    hudButton:setThickness( diamondThickness )
    hudButton:setColorToggleOff( returnDiamondColor )
    hudButton:setColorToggleOffHovered( returnDiamondHoveredColor )
    hudButton:setUseTopBottom( false )
    hudButton:setInnerScale( diamondInnerScale )

    hudButton:setVisible( ent._sev_ReturnPos ~= nil )

    function hudButton:canShowLinked()
        return active
    end

    function hudButton:inputClk( _ply, key, state )
        if not state then return end

        if key == toggleBringChipKey then
            toggleBring( ent, chipData )
        elseif key == clearChipReturnKey then
            clearReturn( ent, chipData )
        end
    end

    function hudButton:getColorEff()
        local restartButton = chipData.RestartButton

        if restartButton and restartButton:isHovered() then
            return self:getColorToggleOffHovered()
        end

        return self.class.getColorEff( self )
    end

    function hudButton:draw( x, y )
        self.class.draw( self, x, y )

        local scrPos = ent:getPos():toScreen()
        if not scrPos.visible then return end

        render.setColor( self:getColorEff() )
        render.drawLine( x, y, scrPos.x, scrPos.y )
    end

    function hudButton:splitOff()
        if not ent._sev_ReturnPos then return end -- Doesn't have a returnb pos, no need to linger.

        -- VERY hacky
        chipData.ReturnButton = nil
        chipData = { ReturnButton = self }
        ent._sev_ReturnButton = self
    end

    return hudButton
end

local function addErroredChip( ent, isServer )
    local data = erroredChipDatas[ent]

    if not data then
        data = {
            OnServer = false,
            OnClient = false,
            ChipName = ent:getChipName(),
        }

        data.RestartButton = makeRestartButton( ent, data )
        data.ReturnButton = makeReturnButton( ent, data )

        erroredChipDatas[ent] = data
    end

    if isServer then
        data.OnServer = true
    else
        data.OnClient = true
    end

    local onServer = data.OnServer
    local onClient = data.OnClient
    local onShared = onServer and onClient
    local restartButton = data.RestartButton

    if onShared then
        restartButton:setLeftTopColor( c_realm_server )
        restartButton:setRightBottomColor( c_realm_client )
    elseif onServer then
        restartButton:setLeftTopColor( c_realm_server )
        restartButton:setRightBottomColor( c_realm_server )
    else
        restartButton:setLeftTopColor( c_realm_client )
        restartButton:setRightBottomColor( c_realm_client )
    end
end


hook.add( "StarfallError", "LKL_SEV_TrackClientError", function( ent, ply )
    local isServer = ply == game.getWorld()

    if not isServer and ply ~= owner() then return end
    if not isValid( ent ) then return end
    if ent:getOwner() ~= owner() then return end

    addErroredChip( ent, isServer )
end )

hook.add( "KeyPress", "LKL_SEV_RemoveChipsWhenRefreshed", function( ply, key )
    if not isFirstTimePredicted() then return end
    if key ~= IN_KEY_ATTACK and key ~= IN_KEY_RELOAD then return end

    local wep = ply:getActiveWeapon()
    if not isValid( wep ) or wep:getClass() ~= "gmod_tool" then return end
    if wep:getToolMode() ~= "starfall_processor" then return end

    local ent = ply:getEyeTrace().Entity
    if not isValid( ent ) or ent:getClass() ~= "starfall_processor" then return end
    if ent:getOwner() ~= ply then return end

    removeErroredChip( ent )
end )

hook.add( "EntityRemoved", "LKL_SEV_RemoveDeletedChips", function( ent )
    if not erroredChipDatas[ent] then return end

    removeErroredChip( ent )
end )


net.receive( "LKL_SEV_SetActive", function()
    active = net.readBool()
end )

net.receive( "LKL_SEV_RestartSucceeded", function()
    local ent = net.readEntity()
    if not isValid( ent ) then return end

    removeErroredChip( ent )
end )


do
    for _, key in ipairs( restartChipKeyCombo ) do
        restartChipKeyComboLookup[key] = true
    end

    enableHud( player(), true )
end
