--@name Sphere Animation
--@author legokidlogan
--@shared
--@include lkl/anims/animation.txt
--@include lkl/math/hsv_math.txt

--[[
    - Creates a sphere holo that changes in size and color over time.
    - Does not inherit from HoloAnimation, meaning the holo exists in the same realm the animation was originally created in.
        - This does not behave nicely with server/client replication, keep it to one realm.
            - i.e. you should always set replicateOnClient to false.
        - Some syncing functionality is maintained due to templating, though the holo itself will cause double-render issues.
    - Cannot have an infinite duration.
--]]

if SphereAnimation then return end

require( "lkl/anims/animation.txt" )
require( "lkl/math/hsv_math.txt" )


math.easeLinear = math.easeLinear or function( frac ) return frac end


SphereAnimation = class( "SphereAnimation", Animation )
local ThisClass = SphereAnimation -- For readability


-- These can be changed on a per-instance basis. They have set/get functions, but the sheer quantity has led me to auto-generate them.
ThisClass.static.SPHERE_SCALE_START = Vector( 0 )
ThisClass.static.SPHERE_SCALE_END = Vector( 1 )
ThisClass.static.SPHERE_COLOR_START = Color( 255, 255, 255, 255 )
ThisClass.static.SPHERE_COLOR_END = Color( 255, 255, 255, 255 )
ThisClass.static.SPHERE_MODEL = "models/sprops/geometry/sphere_48.mdl"
ThisClass.static.SPHERE_MATERIAL = "models/debug/debugwhite"
ThisClass.static.SPHERE_FULLBRIGHT = true
ThisClass.static.SPHERE_FOLLOW = true
ThisClass.static.SPHERE_ANGLE = Angle( 0, 0, 0 )
ThisClass.static.INTERP_CLAMP_SPHERE_SCALE = false
ThisClass.static.INTERP_CLAMP_SPHERE_COLOR = false

-- These can be changed on a per-instance basis. They have manually-made set/get functions due to being more complex.
ThisClass.static.INTERP_EASE_SPHERE_SCALE = "easeLinear"
ThisClass.static.INTERP_EASE_SPHERE_COLOR = "easeLinear"

-- Default value overrides from parent classes
ThisClass.DURATION = 1
ThisClass.UPDATE_INTERVAL = 0.05


local COLOR_EMPTY = Color( 0, 0, 0, 0 )
local VECTOR_ZERO = Vector( 0, 0, 0 )

local resolveEaseFuncName
local lerpUnclamped
local getInterpSphereColor
local getInterpSphereScale

local mathClamp = math.clamp


----- STATIC FUNCTIONS -----

function ThisClass:initialize( replicateOnClient, pos, ang, ... )
    ThisClass.super.initialize( self, replicateOnClient, pos, ang, ... )

    local holo
    pcall( function()
        holo = hologram.create( pos, ang, self.class.SPHERE_MODEL )
    end )
    if not holo then error( "Failed to initialize " .. self.class.name ) end
    self._sphereHolo = holo
    holo:setColor( COLOR_EMPTY )

    self:setInterpEaseSphereScale( self.class.INTERP_EASE_SPHERE_SCALE )
    self:setInterpEaseSphereColor( self.class.INTERP_EASE_SPHERE_COLOR )
end


----- INSTANCE FUNCTIONS -----

function ThisClass:getSphereHolo()
    return self._sphereHolo
end

--[[
    - Sets the name of the easing function used while interpolating the scale of the sphere.
    - Use :setInterpClampOverall() to set whether or not the easing result should be clamped between 0 and 1.

    funcName: (string)
        - The name of the function to use.
        - Must be the name of a function on the global math table. (e.g. "easeInQuart")
            - Has to take one argument and return one result. (e.g. "easeInOut" won't work since it has 3 args)
            - The function will be cached, so you can put something on the math table, call this function, then remove it.
                - Be careful with netowrking though, it has to exist on both realms.
        - Alternatively, it can be a string starting with "ls:" to use loadstring instead.
            - Much better for networking, but comes with the dangers of loadstring.
            - ex: "ls:function( frac ) return frac end"
--]]
function ThisClass:setInterpEaseSphereScale( funcName )
    if funcName == nil then funcName = self.class.INTERP_EASE_SPHERE_SCALE end
    if funcName == self._interpEaseSphereScale then return end

    self._interpEaseSphereScaleFunc = resolveEaseFuncName( funcName )
    self._interpEaseSphereScale = funcName
    self:syncProperty( "SphereAnimation_InterpEaseSphereScale", funcName )
end

-- The name of the easing function used to ease interpolation of the sphere's scale.
function ThisClass:getInterpEaseSphereScale()
    return self._interpEaseSphereScale or self.class.INTERP_EASE_SPHERE_SCALE
end

-- The function used to ease interpolation of the sphere's scale.
function ThisClass:getInterpEaseSphereScaleFunc()
    return self._interpEaseSphereScaleFunc or math.easeLinear
end

-- Same as :setInterpEaseSphereScale(), but for the color of the sphere.
function ThisClass:setInterpEaseSphereColor( funcName )
    if funcName == nil then funcName = self.class.INTERP_EASE_SPHERE_COLOR end
    if funcName == self._interpEaseSphereColor then return end

    self._interpEaseSphereColorFunc = resolveEaseFuncName( funcName )
    self._interpEaseSphereColor = funcName
    self:syncProperty( "SphereAnimation_InterpEaseSphereColor", funcName )
end

function ThisClass:getInterpEaseSphereColor()
    return self._interpEaseSphereColor or self.class.INTERP_EASE_SPHERE_COLOR
end

function ThisClass:getInterpEaseSphereColorFunc()
    return self._interpEaseSphereColorFunc or math.easeLinear
end

function ThisClass:setSphereScaleStart( scale )
    if scale == nil then scale = self.class.SPHERE_SCALE_START end
    if scale == self._sphereScaleStart then return end
    if type( scale ) ~= "Vector" then error( "Expected scale to be a Vector or nil" ) end

    self._sphereScaleStart = scale
    self:syncProperty( "SphereAnimation_SphereScaleStart", scale, nil, nil )
end

function ThisClass:getSphereScaleStart()
    return self._sphereScaleStart or self.class.SPHERE_SCALE_START
end

function ThisClass:setSphereScaleEnd( scale )
    if scale == nil then scale = self.class.SPHERE_SCALE_END end
    if scale == self._sphereScaleEnd then return end
    if type( scale ) ~= "Vector" then error( "Expected scale to be a Vector or nil" ) end

    self._sphereScaleEnd = scale
    self:syncProperty( "SphereAnimation_SphereScaleEnd", scale, nil, nil )
end

function ThisClass:getSphereScaleEnd()
    return self._sphereScaleEnd or self.class.SPHERE_SCALE_END
end

function ThisClass:setSphereColorStart( color )
    if color == nil then color = self.class.SPHERE_COLOR_START end
    if color == self._sphereColorStart then return end
    if type( color ) ~= "Color" then error( "Expected color to be a Color or nil" ) end

    self._sphereColorStart = color
    self._sphereColorStartHSV = hsvMath.rgbToHSV( color )
    self:syncProperty( "SphereAnimation_SphereColorStart", color, nil, nil )
end

function ThisClass:getSphereColorStart()
    return self._sphereColorStart or self.class.SPHERE_COLOR_START
end

function ThisClass:setSphereColorEnd( color )
    if color == nil then color = self.class.SPHERE_COLOR_END end
    if color == self._sphereColorEnd then return end
    if type( color ) ~= "Color" then error( "Expected color to be a Color or nil" ) end

    self._sphereColorEnd = color
    self._sphereColorEndHSV = hsvMath.rgbToHSV( color )
    self:syncProperty( "SphereAnimation_SphereColorEnd", color, nil, nil )
end

function ThisClass:getSphereColorEnd()
    return self._sphereColorEnd or self.class.SPHERE_COLOR_END
end

function ThisClass:setSphereModel( model )
    if model == nil then model = self.class.SPHERE_MODEL end
    if model == self._sphereModel then return end
    if type( model ) ~= "string" then error( "Expected model to be a string or nil" ) end

    self._sphereModel = model
    self:syncProperty( "SphereAnimation_SphereModel", model, nil, nil )
end

function ThisClass:getSphereModel()
    return self._sphereModel or self.class.SPHERE_MODEL
end

function ThisClass:setSphereMaterial( material )
    if material == nil then material = self.class.SPHERE_MATERIAL end
    if material == self._sphereMaterial then return end
    if type( material ) ~= "string" then error( "Expected material to be a string or nil" ) end

    self._sphereMaterial = material
    self:syncProperty( "SphereAnimation_SphereMaterial", material, nil, nil )
end

function ThisClass:getSphereMaterial()
    return self._sphereMaterial or self.class.SPHERE_MATERIAL
end

function ThisClass:setSphereFullbright( state )
    if state == nil then state = self.class.SPHERE_FULLBRIGHT end
    if state == self._sphereFullbright then return end
    if type( state ) ~= "boolean" then error( "Expected state to be a boolean or nil" ) end

    self._sphereFullbright = state
    self:syncProperty( "SphereAnimation_SphereFullbright", state, nil, nil )
end

function ThisClass:getSphereFullbright()
    local state = self._sphereFullbright
    if state == nil then return self.class.SPHERE_FULLBRIGHT end

    return state
end

function ThisClass:setSphereFollow( state )
    if state == nil then state = self.class.SPHERE_FOLLOW end
    if state == self._sphereFollow then return end
    if type( state ) ~= "boolean" then error( "Expected state to be a boolean or nil" ) end

    self._sphereFollow = state
    self:syncProperty( "SphereAnimation_SphereFollow", state, nil, nil )
end

function ThisClass:getSphereFollow()
    local state = self._sphereFollow
    if state == nil then return self.class.SPHERE_FOLLOW end

    return state
end

function ThisClass:setSphereAngle( angle )
    if angle == nil then angle = self.class.SPHERE_ANGLE end
    if angle == self._sphereAngle then return end
    if type( angle ) ~= "Angle" then error( "Expected angle to be a Angle or nil" ) end

    self._sphereAngle = angle
    self:syncProperty( "SphereAnimation_SphereAngle", angle, nil, nil )
end

function ThisClass:getSphereAngle()
    return self._sphereAngle or self.class.SPHERE_ANGLE
end

function ThisClass:setInterpClampSphereScale( state )
    if state == nil then state = self.class.INTERP_CLAMP_SPHERE_SCALE end
    if state == self._interpClampSphereScale then return end
    if type( state ) ~= "boolean" then error( "Expected state to be a boolean or nil" ) end

    self._interpClampSphereScale = state
    self:syncProperty( "SphereAnimation_InterpClampSphereScale", state, nil, nil )
end

function ThisClass:getInterpClampSphereScale()
    local state = self._interpClampSphereScale
    if state == nil then return self.class.INTERP_CLAMP_SPHERE_SCALE end

    return state
end

function ThisClass:setInterpClampSphereColor( state )
    if state == nil then state = self.class.INTERP_CLAMP_SPHERE_COLOR end
    if state == self._interpClampSphereColor then return end
    if type( state ) ~= "boolean" then error( "Expected state to be a boolean or nil" ) end

    self._interpClampSphereColor = state
    self:syncProperty( "SphereAnimation_InterpClampSphereColor", state, nil, nil )
end

function ThisClass:getInterpClampSphereColor()
    local state = self._interpClampSphereColor
    if state == nil then return self.class.INTERP_CLAMP_SPHERE_COLOR end

    return state
end


----- OVERRIDABLE FUNCTIONS -----



----- IMPLEMENTED FUNCTIONS -----

function ThisClass:handlePlayback( time )
    local timeFrac = self:getTimeFractional( time )
    local holo = self:getSphereHolo()

    local colorStartHSV = self._sphereColorStartHSV
    local colorEndHSV = self._sphereColorEndHSV

    if colorStartHSV ~= colorEndHSV then
        holo:setColor( getInterpSphereColor( self, timeFrac, colorStartHSV, colorEndHSV ) )
    end

    local scaleStart = self:getSphereScaleStart()
    local scaleEnd = self:getSphereScaleEnd()

    if scaleStart ~= scaleEnd then
        holo:setScale( getInterpSphereScale( self, timeFrac, scaleStart, scaleEnd ) )
    end
end

function ThisClass:onStartPlaying( wasFullStopped )
    if wasFullStopped then
        local holo = self:getSphereHolo()
        local timeFrac = self:getTimeFractional()

        holo:setModel( self:getSphereModel() )
        holo:setMaterial( self:getSphereMaterial() )
        holo:setScale( getInterpSphereScale( self, timeFrac ) )
        holo:suppressEngineLighting( self:getSphereFullbright() )
        holo:setPos( self:getPos() )
        holo:setAngles( self:localToWorldAngles( self:getSphereAngle() ) )
        holo:setColor( getInterpSphereColor( self, timeFrac ) )
    end
end

function ThisClass:onStopPlaying( isFullStop )
    if isFullStop then
        local holo = self:getSphereHolo()

        holo:setColor( COLOR_EMPTY )
        holo:setPos( VECTOR_ZERO )
    end
end

-- Dissallow infinite-duration animations, since it will break start/end calculations.
function ThisClass:setDuration( duration )
    if duration == 0 then error( "This class does not support infinite-length durations, duration must be > 0" ) end

    ThisClass.super.setDuration( self, duration )
end

function ThisClass:onPosAngChanged( ... )
    ThisClass.super.onPosAngChanged( self, ... )

    if self:getSphereFollow() and self:isPlaying() then
        local holo = self:getSphereHolo()

        holo:setPos( self:getPos() )
        holo:setAngles( self:localToWorldAngles( self:getSphereAngle() ) )
    end
end


----- PRIVATE FUNCTIONS -----

resolveEaseFuncName = function( funcName )
    if type( funcName ) ~= "string" then error( "Expected funcName to be a string" ) end

    local func

    if funcName:sub( 1, 3 ) == "ls:" then
        loadstring( "func = " .. funcName:sub( 4 ) )()
    else
        func = math[funcName]
    end

    if type( func ) ~= "function" then error( "Expected funcName to resolve to a function" ) end

    return func
end

lerpUnclamped = function( frac, from, to )
    if from == to then return from end
    if frac == 1 then return to end
    if frac == 0 then return from end

    return from + ( to - from ) * frac
end

getInterpSphereColor = function( anim, timeFrac, overrideStartHSV, overrideEndHSV )
    local colorStartHSV = overrideStartHSV or anim._sphereColorStartHSV
    local colorEndHSV = overrideEndHSV or anim._sphereColorEndHSV

    local easeFuncSphereColor = anim:getInterpEaseSphereColorFunc()
    local interpClampSphereColor = anim:getInterpClampSphereColor()
    local easeFracSphereColor = easeFuncSphereColor( timeFrac )
    local interpFracSphereColor = interpClampSphereColor and mathClamp( easeFracSphereColor, 0, 1 ) or easeFracSphereColor

    return hsvMath.lerpHSVToRGB( interpFracSphereColor, colorStartHSV, colorEndHSV, false )
end

getInterpSphereScale = function( anim, timeFrac, overrideStart, overrideEnd )
    local scaleStart = overrideStart or anim:getSphereScaleStart()
    local scaleEnd = overrideEnd or anim:getSphereScaleEnd()

    local easeFuncSphereScale = anim:getInterpEaseSphereScaleFunc()
    local interpClampSphereScale = anim:getInterpClampSphereScale()
    local easeFracSphereScale = easeFuncSphereScale( timeFrac )
    local interpFracSphereScale = interpClampSphereScale and mathClamp( easeFracSphereScale, 0, 1 ) or easeFracSphereScale

    return lerpUnclamped( interpFracSphereScale, scaleStart, scaleEnd )
end


----- SETUP -----

if SERVER then
    function ThisClass:writeCreationData( pos, ang )
        net.writeVector( pos )
        net.writeAngle( ang )
    end

    return
end


function ThisClass.static:readCreationData()
    return {
        net.readVector(),
        net.readAngle(),
    }
end


net.receive( "LKL_Syncable_Set__SphereAnimation_InterpEaseSphereScale", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readString()

    if not anim then return end

    anim:setInterpEaseSphereScale( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_InterpEaseSphereColor", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readString()

    if not anim then return end

    anim:setInterpEaseSphereColor( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereScaleStart", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readVector()
    if not anim then return end

    anim:setSphereScaleStart( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereScaleEnd", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readVector()
    if not anim then return end

    anim:setSphereScaleEnd( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereColorStart", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readColor()
    if not anim then return end

    anim:setSphereColorStart( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereColorEnd", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readColor()
    if not anim then return end

    anim:setSphereColorEnd( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereModel", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readString()
    if not anim then return end

    anim:setSphereModel( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereMaterial", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readString()
    if not anim then return end

    anim:setSphereMaterial( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereFullbright", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readBool()
    if not anim then return end

    anim:setSphereFullbright( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereFollow", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readBool()
    if not anim then return end

    anim:setSphereFollow( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_SphereAngle", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readAngle()
    if not anim then return end

    anim:setSphereAngle( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_InterpClampSphereScale", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readBool()
    if not anim then return end

    anim:setInterpClampSphereScale( value )
end )

net.receive( "LKL_Syncable_Set__SphereAnimation_InterpClampSphereColor", function()
    local anim = Syncable:readSyncedCopy()
    local value = net.readBool()
    if not anim then return end

    anim:setInterpClampSphereColor( value )
end )
