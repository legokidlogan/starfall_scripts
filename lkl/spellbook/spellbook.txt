--@name Spellbook
--@author legokidlogan and shrooblooms
--@shared

--@include lkl/hook_remote_fix.txt
--@include lkl/version_compare.txt

--@include lkl/spellbook/spellbook_file_loader.txt
--@include lkl/spellbook/spellbook_sv.txt
--@include lkl/spellbook/spellbook_cl.txt
--@include lkl/spellbook/spellbook_cl_owner.txt

--@include lkl/spellbook/spell.txt
--@include lkl/spellbook/instant_spell.txt
--@include lkl/spellbook/charged_spell.txt
--@include lkl/spellbook/channeled_spell.txt
--@include lkl/spellbook/passive_spell.txt

spellbook = spellbook or {}
spellbook.RIGHT_PAGE_STYLES = spellbook.RIGHT_PAGE_STYLES or {}

require( "lkl/hook_remote_fix.txt" )
require( "lkl/version_compare.txt" )


-- To avoid redundant file sending for custom spellbooks, the includir directive was removed from this chip.
-- Treat this as a library only, and use custom_spellbook.txt for actually placing the spellbook.
-- It's HIGHLY recommended to copy it to another file and make your own custom edits, and for you to make your own spells.

-- CONFIG DEFAULTS (Override these before require()'ing this file)
spellbook.MANA_MAX = spellbook.MANA_MAX or 100
spellbook.MANA_REGEN = spellbook.MANA_REGEN or 3
spellbook.SPELL_FOLDER = spellbook.SPELL_FOLDER or "lkl/spellbook/spells" -- If you change/add a folder here, remember to includedir it!
spellbook.SPELL_FOLDER_EXTRA = spellbook.SPELL_FOLDER_EXTRA or "" -- If you change/add a folder here, remember to includedir it!
spellbook.CHOICES_PER_PAGE = spellbook.CHOICES_PER_PAGE or 12
spellbook.SUMMON_KEY = spellbook.SUMMON_KEY or KEY.R -- Press while the radial menu is open.
spellbook.WEAPON_CLASS = spellbook.WEAPON_CLASS or "none" -- This swep has to be held for the book to open. The default is "none", the hands swep from https://steamcommunity.com/sharedfiles/filedetails/?id=245482078
spellbook.RIGHT_PAGE_STYLE = spellbook.RIGHT_PAGE_STYLE or "classic" -- The style of the right page. See spellbook_right_page.txt for builtin styles. Spells can use different styles as well!
spellbook.FILE_LOAD_INTERVAL = spellbook.FILE_LOAD_INTERVAL or 0.05 -- Introduces a delay (and perf check) between each spell file being loaded, to avoid CPU exceeding on initialization. 0 to disable.
if spellbook.DISABLE_COOLDOWN_SOUND == nil then spellbook.DISABLE_COOLDOWN_SOUND = false end
if spellbook.DRAW_MANA_PREVIEW == nil then spellbook.DRAW_MANA_PREVIEW = true end -- Draws a preview of mana consumption on the spellbook.
if spellbook.DRAW_MANA_HUD == nil then spellbook.DRAW_MANA_HUD = true end -- Draws a HL2-style mana bar on the screen.

if spellbook.DRAW_SPELL_CROSSHAIR == nil then spellbook.DRAW_SPELL_CROSSHAIR = true end -- Replaces the normal crosshair with a custom one while the spellbook is open.
if spellbook.SPELL_CROSSHAIR_SMALL_USES_SPELL_COLOR == nil then spellbook.SPELL_CROSSHAIR_SMALL_USES_SPELL_COLOR = true end -- Makes the small dots use the selected spell's color.
spellbook.SPELL_CROSSHAIR_BIG_COLOR = spellbook.SPELL_CROSSHAIR_BIG_COLOR or Color( 255, 255, 255, 255 )
spellbook.SPELL_CROSSHAIR_SMALL_COLOR = spellbook.SPELL_CROSSHAIR_SMALL_COLOR or Color( 255, 255, 255, 255 )
spellbook.SPELL_CROSSHAIR_CANT_CAST_COLOR = spellbook.SPELL_CROSSHAIR_CANT_CAST_COLOR or Color( 255, 0, 0, 150 )
spellbook.SPELL_CROSSHAIR_USE_CROSSCROSS = spellbook.SPELL_CROSSHAIR_USE_CROSSCROSS or false -- If true, uses the Cross Cross library for crosshair positioning. Draws with priority 15000.

spellbook.HOLO_BUFFER_START_SIZE = spellbook.HOLO_BUFFER_START_SIZE or 30 -- For serverside holos.
spellbook.HOLO_BUFFER_MAX_SIZE = spellbook.HOLO_BUFFER_MAX_SIZE or 100

spellbook.ICON_SIZE = spellbook.ICON_SIZE or 256
if spellbook.ICON_AT_TOP == nil then spellbook.ICON_AT_TOP = true end -- Top vs bottom of the page.

spellbook.BOOK_WIDTH = spellbook.BOOK_WIDTH or 16
spellbook.BOOK_HEIGHT = spellbook.BOOK_HEIGHT or 16
spellbook.BOOK_DEPTH = spellbook.BOOK_DEPTH or 4
spellbook.PAGE_INSET = spellbook.PAGE_INSET or 0.5
spellbook.COVER_THICKNESS = spellbook.COVER_THICKNESS or 1
spellbook.COVER_MATERIAL = spellbook.COVER_MATERIAL or "phoenix_storms/concrete0"
spellbook.PAGE_MATERIAL = spellbook.PAGE_MATERIAL or "sprops/sprops_plastic"
spellbook.COVER_COLOR = spellbook.COVER_COLOR or Color( 150, 50, 50, 255 )
spellbook.PAGE_COLOR = spellbook.PAGE_COLOR or Color( 255, 230, 180, 255 )
spellbook.PAGE_DETAIL_COLOR = spellbook.PAGE_DETAIL_COLOR or Color( 240, 215, 170, 255 )

spellbook.OPEN_ANGLE = spellbook.OPEN_ANGLE or 75
spellbook.OPEN_DURATION = spellbook.OPEN_DURATION or 0.5
spellbook.CLOSE_DURATION = spellbook.CLOSE_DURATION or 0.5
spellbook.POS_OPEN = spellbook.POS_OPEN or Vector( 40, 0, -15 )
spellbook.POS_OPEN_FIRST_PERSON = spellbook.POS_OPEN_FIRST_PERSON or Vector( 40, 0, -15 )
spellbook.POS_CLOSED = spellbook.POS_CLOSED or Vector( 10, -20, -25 )
spellbook.POS_CLOSED_FIRST_PERSON = spellbook.POS_CLOSED_FIRST_PERSON or Vector( 40, -30, -15 )

 -- Provide a list of (case-sensitive) spell names to force their order, and any remaining spells will go in arbitrary order after them.
spellbook.MANUAL_SPELL_ORDER = spellbook.MANUAL_SPELL_ORDER or {
    "",
}
-- END CONFIG DEFAULTS


spellbook.COLOR_FAIL = Color( 200, 0, 0, 255 )
spellbook.COLOR_MANA = Color( 75, 75, 255, 255 )
spellbook.COLOR_MANA_DRAIN_ACTIVE = Color( 89, 38, 153 )
spellbook.COLOR_MANA_GAIN_ACTIVE = Color( 184, 127, 255 )
spellbook.COLOR_MANA_DRAIN_CHARGED = Color( 38, 153, 120 )
spellbook.COLOR_MANA_GAIN_CHARGED = Color( 127, 255, 218 )
spellbook.COLOR_MANA_DRAIN_INSTANT = Color( 38, 38, 153 )
spellbook.COLOR_MANA_GAIN_INSTANT = Color( 127, 127, 255 )

spellbook.VERSION = "1.7.12"


SPELLVIS_ALL = 1
SPELLVIS_NONE = 2
SPELLVIS_OWNER = 3
SPELLVIS_OWNER_FP = 4
SPELLVIS_COUNT = 4


require( "lkl/spellbook/spell.txt" )
require( "lkl/spellbook/instant_spell.txt" )
require( "lkl/spellbook/charged_spell.txt" )
require( "lkl/spellbook/channeled_spell.txt" )
require( "lkl/spellbook/passive_spell.txt" )


local spells = {}
local sprintBlockerNoNet = false
local sprintForced = false
local spellVis = SPELLVIS_ALL

spellbook.spells = spells
spellbook.mana = spellbook.MANA_MAX
spellbook.selectedSpellID = 1
spellbook.summoned = false
spellbook.open = false

require( "lkl/spellbook/spellbook_file_loader.txt" )


----- GLOBAL FUNCTIONS -----

-- Returns true once the entire library (including spells) is loaded.
function spellbook.isLoaded()
    return false
end

function spellbook.getSelectedSpell()
    return spells[spellbook.selectedSpellID]
end

--[[
    - Calculates the position, angle, and anim fraction of the book's spine.
    - Forward points outward, away from the owner.

    openCloseEndTime: (optional) number
        - The time at which the current open/close animation ends.
        - If not provided, assumes the animation is fully complete.
    isFirstPerson: (optional) boolean
        - If true, the book is in first person view.
        - If false, the book is in third person view.
        - Defaults to false.

    RETURNS: pos, ang, frac
        pos: Vector
            - The position of the book's spine.
        ang: Angle
            - The angle of the book's spine.
        frac: number (0-1)
            - The fraction of the current animation's progress.
            - Whether the book is currently opening or closing can be gotten from spellbook.open.

    - Calls the LKL_Spellbook_OverrideBookPosAng( pos, ang, frac, openCloseEndTime, isFirstPerson ) hook to allow for custom calculations.
--]]
function spellbook.calcBookPosAng( openCloseEndTime, isFirstPerson )
    local duration
    local timeSince
    local frac = 1
    local open = spellbook.open
    local posOffset = isFirstPerson and ( open and spellbook.POS_OPEN_FIRST_PERSON or spellbook.POS_CLOSED_FIRST_PERSON ) or ( open and spellbook.POS_OPEN or spellbook.POS_CLOSED )

    if openCloseEndTime then
        duration = open and spellbook.OPEN_DURATION or spellbook.CLOSE_DURATION
        timeSince = timer.curtime() - ( openCloseEndTime - duration )
        frac = math.clamp( timeSince / duration, 0, 1 )
        frac = math.easeInOutQuad( frac )

        -- Lerp the position as well
        local posOffsetOther = isFirstPerson and ( open and spellbook.POS_CLOSED_FIRST_PERSON or spellbook.POS_OPEN_FIRST_PERSON ) or ( open and spellbook.POS_CLOSED or spellbook.POS_OPEN )

        posOffset = posOffset * frac + posOffsetOther * ( 1 - frac )
    end

    local eyeAng = owner():getEyeAngles()

    if not isFirstPerson and not open then
        eyeAng.p = 0
    end

    local pos = owner():getShootPos() +
        eyeAng:getForward() * posOffset.x -
        eyeAng:getRight() * posOffset.y +
        eyeAng:getUp() * posOffset.z

    local newPos, newAng, newFrac = hook.run( "LKL_Spellbook_OverrideBookPosAng", pos, eyeAng, frac, openCloseEndTime, isFirstPerson )

    if newPos then
        pos = newPos
    end

    if newAng then
        eyeAng = newAng
    end

    if newFrac then
        frac = newFrac
    end

    return pos, eyeAng, frac
end

function spellbook.targetFilter( ent )
    if not isValid( ent ) then return false end
    if ent == owner() then return false end

    local isPlayer = ent:isPlayer()
    if not isPlayer and not ent:isNPC() and not ent:isNextBot() then return false end

    if isPlayer then
        if not ent:isAlive() then return false end
        if ent.isInPvp and not ent:isInPvp() then return false end
        if SERVER and ent:hasGodMode() then return false end
    else
        if ent:getHealth() <= 0 then return false end
    end

    return true
end

-- A helper function for net messages.
-- actuallyJustNoOne makes it return nil, for convenience with messages sent by both server and client owner.
function spellbook.getEveryoneButOwner( actuallyJustNoOne )
    if actuallyJustNoOne then return end

    return find.allPlayers( function( ent ) return ent ~= owner() end )
end

-- Returns a list and lookup table of all players who have a spellbook.
-- The lookup table also notes the latest version of the spellbook library the player is using.
function spellbook.getSpellbookUsers()
    local results = hookRunRemoteFixed( nil, "LKL_Spellbook_FindSpellbooks" )
    local plys = {}
    local plyLookup = {}

    for _, result in ipairs( results ) do
        if result[1] == "HelloYesIAmASpellbook" then
            local ply = result.Chip:getOwner()

            if isValid( ply ) then
                local oldVersion = plyLookup[ply]
                local curVersion = result[2] or "1.0.0"

                if not oldVersion then
                    table.insert( plys, ply )
                end

                if not oldVersion or compareVersions( curVersion, oldVersion ) > 0 then
                    plyLookup[ply] = curVersion
                end
            end
        end
    end

    return plys, plyLookup
end

--[[
    - Sets visibility of the spellbook and clothing holos.
    - Intended to be called from the server or client owner, but can be called directly on other clients as well.

    vis: (number)
        - SPELLVIS_ALL: All players can see the spellbook.
        - SPELLVIS_NONE: No one can see the spellbook.
        - SPELLVIS_OWNER: Only the owner can see the spellbook.
        - SPELLVIS_OWNER_FP: Only the owner, in first person mode, can see the spellbook.
--]]
function spellbook.setVisibility( vis )
    if spellVis == vis then return end

    if type( vis ) ~= "number" then error( "Expected vis to be a number" ) end
    if math.floor( vis ) ~= vis then error( "Expected vis to be an integer" ) end
    if vis < 1 or vis > SPELLVIS_COUNT then error( "Expected vis to be between 1 and " .. SPELLVIS_COUNT ) end

    local oldVis = spellVis

    spellVis = vis
    hook.run( "LKL_Spellbook_OnSetVisibility", oldVis, spellVis )

    if CLIENT and player() ~= owner() then return end

    net.start( "LKL_Spellbook_SetVisibility" )
    net.writeUInt( vis, 3 )
    net.send()
end

function spellbook.getVisibility()
    return spellVis
end

-- Returns whether or not the spellbook should be visible, given current conditions and visibility settings. Ignores the spellbook's summoned state.
function spellbook.isVisible()
    if spellVis == SPELLVIS_ALL then return true end
    if spellVis == SPELLVIS_NONE then return false end
    if spellVis == SPELLVIS_OWNER and CLIENT and player() == owner() then return true end
    if spellVis == SPELLVIS_OWNER_FP and CLIENT and player() == owner() and spellbook.isInFirstPerson() then return true end

    return false
end

-- An internal helper function to consolidate the open check. Does not care about the summoned state.
function spellbook.shouldBookBeOpen()
    if owner():inVehicle() then return true end

    local wep = owner():getActiveWeapon()

    return isValid( wep ) and wep:getClass() == spellbook.WEAPON_CLASS
end


if SERVER or player() == owner() then
    local sprintBlockers = {}


    -- Adds a sprint blocker. If at least one sprint blocker is active, sprinting will be blocked.
    function spellbook.addSprintBlocker( blockerName )
        sprintBlockers[blockerName] = true

        if not sprintBlockerNoNet then
            net.start( "LKL_Spellbook_SprintBlocker" )
            net.writeString( blockerName )
            net.writeBool( true )
            net.send( owner() )
        end

        if CLIENT then
            sprintForced = false

            pcall( function()
                concmd( "-speed" )
            end )
        end
    end

    function spellbook.removeSprintBlocker( blockerName )
        if not sprintBlockers[blockerName] then return end

        sprintBlockers[blockerName] = nil

        if not sprintBlockerNoNet then
            net.start( "LKL_Spellbook_SprintBlocker" )
            net.writeString( blockerName )
            net.writeBool( false )
            net.send( owner() )
        end

        if CLIENT and not spellbook.isSprintBlocked() and input.isKeyDown( input.lookupBinding( "+speed" ) ) then
            pcall( function()
                concmd( "+speed" )
                sprintForced = true
            end )
        end
    end

    -- Returns the sprint blockers lookup table. Do not modify it.
    function spellbook.getSprintBlockers()
        return sprintBlockers
    end

    function spellbook.isSprintBlocker( blockerName )
        return sprintBlockers[blockerName] or false
    end

    function spellbook.isSprintBlocked()
        return next( sprintBlockers ) ~= nil
    end
end


----- SETUP -----

if SERVER or player() == owner() then
    hook.add( "KeyPress", "LKL_Spellbook_KeyPress", function( ply, key )
        if not spellbook.summoned then return end
        if not spellbook.open then return end

        if SERVER then
            if ply ~= owner() then return end
        else
            if not isFirstTimePredicted() then return end
        end

        local spell = spellbook.getSelectedSpell()

        spell:onKeyPress( key )
    end )

    hook.add( "KeyRelease", "LKL_Spellbook_KeyRelease", function( ply, key )
        if not spellbook.summoned then return end
        if not spellbook.open then return end

        if SERVER then
            if ply ~= owner() then return end
        else
            if not isFirstTimePredicted() then return end
        end

        local spell = spellbook.getSelectedSpell()

        spell:onKeyRelease( key )
    end )
end


if CLIENT and player() == owner() then
    hook.add( "KeyPress", "LKL_Spellbook_BlockSprint", function( _, key )
        if not isFirstTimePredicted() then return end
        if key ~= IN_KEY.SPEED then return end
        if not spellbook.isSprintBlocked() then return end

        pcall( function()
            concmd( "-speed" )
        end )
    end )

    hook.add( "inputReleased", "LKL_Spellbook_ReSprint", function( key )
        if not isFirstTimePredicted() then return end
        if not sprintForced then return end
        if not string.find( input.lookupKeyBinding( key ) or "", "+speed" ) then return end

        pcall( function()
            concmd( "-speed" )
            sprintForced = false
        end )
    end )
end


hook.add( "remote", "LKL_Spellbook_IdentifyAsSpellbook", function( _, _, hookName )
    if hookName ~= "LKL_Spellbook_FindSpellbooks" then return end

    --return { "HelloYesIAmASpellbook", spellbook.VERSION }
    return "HelloYesIAmASpellbook", spellbook.VERSION
end )


if SERVER or player() == owner() then
    net.receive( "LKL_Spellbook_SprintBlocker", function( _, ply )
        if SERVER and ply ~= owner() then return end

        local blockerName = net.readString()
        local state = net.readBool()

        sprintBlockerNoNet = true

        if state then
            spellbook.addSprintBlocker( blockerName )
        else
            spellbook.removeSprintBlocker( blockerName )
        end

        sprintBlockerNoNet = false
    end )
end


net.receive( "LKL_Spellbook_SelectSpell", function( _, ply )
    if SERVER and ply ~= owner() then return end

    local spellID = net.readUInt( 16 )
    local prevSpell = spellbook.getSelectedSpell()
    spellbook.selectedSpellID = spellID
    local nextSpell = spellbook.getSelectedSpell()

    if spellbook.isLoaded() then
        prevSpell:onDeselected( nextSpell )
        nextSpell:onSelected( prevSpell )
        hook.run( "LKL_Spellbook_OnSpellSelected", prevSpell, nextSpell )
    end

    if CLIENT then return end

    net.start( "LKL_Spellbook_SelectSpell" )
    net.writeUInt( spellID, 16 )
    net.send( spellbook.getEveryoneButOwner() )
end )

net.receive( "LKL_Spellbook_SetSummoned", function( _, ply )
    if SERVER and ply ~= owner() then return end

    local state = net.readBool()
    local wasOpen = spellbook.open

    spellbook.summoned = state
    spellbook.open = false

    hook.run( "LKL_Spellbook_OnSetSummoned", state )

    if wasOpen then
        hook.run( "LKL_Spellbook_OnOpenChanged", false )
    end

    if CLIENT then return end

    net.start( "LKL_Spellbook_SetSummoned" )
    net.writeBool( state )
    net.send( spellbook.getEveryoneButOwner() )
end )

net.receive( "LKL_Spellbook_SetVisibility", function( _, ply )
    if SERVER and ply ~= owner() then return end

    local vis = net.readUInt( 3 )
    local oldVis = spellVis

    spellVis = vis
    hook.run( "LKL_Spellbook_OnSetVisibility", oldVis, spellVis )

    if CLIENT then return end

    net.start( "LKL_Spellbook_SetVisibility" )
    net.writeUInt( vis, 3 )
    net.send( spellbook.getEveryoneButOwner() )
end )
