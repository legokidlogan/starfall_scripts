--@name Data Pearl
--@author legokidlogan
--@shared
--@model models/sprops/geometry/sphere_3.mdl

dataPearl = dataPearl or {}

-- CONFIG
dataPearl.NAME = dataPearl.NAME or "Data Pearl" -- Clientside-only display name. The @name directive needs to be "Data Pearl" for detection by the pearl reader.
dataPearl.READ_PERMISSION_MODE = dataPearl.READ_PERMISSION_MODE or 1 -- Who can use remote hooks to read the data. 0 = anyone, 1 = owner-only, or function( ply ) return canRead end

if dataPearl.SEND_TO_CLIENTS == nil then dataPearl.SEND_TO_CLIENTS = false end -- Also send data to clients. Only useful if you have a clientside chip using LKL_DataPearl_DataChanged or LKL_DataPearl_ReadData.
if dataPearl.CLIENT_OWNER_ONLY == nil then dataPearl.CLIENT_OWNER_ONLY = false end -- Only sends data to the owner's client instead of everyone.
if dataPearl.GRAB_ALLOWED == nil then dataPearl.GRAB_ALLOWED = true end

local GRAB_RANGE = 120
local GRAB_DISTANCE = 50
local GRAB_DROP_DISTANCE = 200
local GRAB_STRENGTH = 35
local GRAB_VEL_ACCOUNT = 0.1
local GRAB_THROW_STRENGTH = 300

local IMPACT_SOUND_ENABLED = true
local IMPACT_SOUND_COOLDOWN = 0.25
local IMPACT_SOUND_SPEED_MIN = 100
local IMPACT_SOUND_SPEED_MAX = 1000
local IMPACT_SOUND_VOLUME = 1
local IMPACT_SOUND_PITCH = 150
local IMPACT_SOUND_PATH = function()
    return "physics/glass/glass_bottle_impact_hard" .. math.random( 1, 3 ) .. ".wav"
end
-- END CONFIG


local VECTOR_ZERO = Vector( 0, 0, 0 )

local VERSION = dataPearl.VERSION
local NAME = dataPearl.NAME
local SEND_TO_CLIENTS = dataPearl.SEND_TO_CLIENTS
local GRAB_ALLOWED = dataPearl.GRAB_ALLOWED
local CLIENT_OWNER_ONLY = dataPearl.CLIENT_OWNER_ONLY

local canPlyReadData
local getReadAllowedChips


if dataPearl.READ_PERMISSION_MODE == 0 then
    canPlyReadData = function()
        return true
    end

    getReadAllowedChips = function()
        return find.byClass( "starfall_processor" )
    end
elseif dataPearl.READ_PERMISSION_MODE == 1 then
    canPlyReadData = function( ply )
        return ply == owner()
    end

    getReadAllowedChips = function()
        return find.byClass( "starfall_processor", function( ent )
            if not isValid( ent ) then return false end

            return ent:getOwner() == owner()
        end )
    end
elseif type( dataPearl.READ_PERMISSION_MODE ) == "function" then
    canPlyReadData = dataPearl.READ_PERMISSION_MODE

    getReadAllowedChips = function()
        return find.byClass( "starfall_processor", function( ent )
            if not isValid( ent ) then return false end

            return canPlyReadData( ent:getOwner() )
        end )
    end
else
    error( "Invalid dataPearl.READ_PERMISSION_MODE; it must be 0, 1, or a function" )
end


local function fixColors( tbl )
    for key, value in pairs( tbl ) do
        if type( value ) == "table" then
            local r = value.r
            if not r then continue end

            local g = value.g
            if not g then continue end

            local b = value.b
            if not b then continue end

            local a = value.a
            if not a then continue end

            tbl[key] = Color( r, g, b, a )
        end
    end
end

-- Different from HRM's hookRunRemoteFixed() as this ignores empty responses and returns false if no valid results were found.
local function hookRunRemoteSafe( targets, hookName, ... )
    local results
    local args = { ... }

    if type( targets ) == "table" then
        results = {}

        for _, target in ipairs( targets ) do
            local result = hookRunRemoteSafe( target, hookName, unpack( args ) )

            if result then
                table.insert( results, result[1] )
            end
        end

        if #results == 0 then
            return false
        end

        return results
    end

    if not isValid( targets ) or not targets:hasInstance() then return false end

    pcall( function()
        results = hook.runRemote( targets, hookName, unpack( args ) )
    end )

    if results and not results[1] then
        return false
    end

    return results
end


if SERVER then
    local pearlColor = nil
    local pearlColorStr = nil
    local beingReadBy = false
    local beingGrabbedBy = nil
    local userdataCompressed = getUserdata()
    local userdataString = ""
    local userdata = {}
    local toolClassesLookup = {
        ["gmod_tool"] = true,
        ["weapon_physgun"] = true,
    }


    local function sendToClients( targets )
        if net.isStreaming() then
            timer.simple( 1, function()
                sendToClients( targets )
            end )

            return
        end

        if type( targets ) == "Player" then
            if not isValid( targets ) then return end

            targets = { targets }
        elseif type( targets ) == "table" then
            for i = #targets, 1, -1 do
                if not isValid( targets[i] ) then
                    table.remove( targets, i )
                end
            end
        elseif targets == nil then
            targets = find.allPlayers()
        end

        if not SEND_TO_CLIENTS or CLIENT_OWNER_ONLY then
            -- If not sending data, still send blank status.
            net.start( "LKL_DataPearl_SetBlankStatus" )
            net.writeBool( userdataCompressed == "" )
            net.send( targets )

            if not SEND_TO_CLIENTS then return end
        end

        if CLIENT_OWNER_ONLY then
            if table.hasValue( targets, owner() ) then
                targets = owner() -- Restrict to just the owner.
            else
                return -- No one to send data to.
            end
        end

        net.start( "LKL_DataPearl_DataChanged" )
            if #userdataCompressed < net.getBytesLeft() - 200 then
                net.writeBool( true )
                net.writeString( userdataCompressed )
            else
                net.writeBool( false )
                net.writeStream( userdataCompressed, false )
            end
        net.send( targets )
    end

    local function setUserdataCompressed( str )
        userdataCompressed = str
        userdataString = bit.decompress( userdataCompressed ) or userdataCompressed
        userdata = {}

        local jsonStrSplit = string.split( userdataString, "}," )

        if #jsonStrSplit < 1000 then
            pcall( function()
                userdata = json.decode( userdataString ) or {}
            end )
        end

        fixColors( userdata )

        setUserdata(
            pearlColorStr ..
            userdataCompressed
        )

        hookRunRemoteSafe( getReadAllowedChips(), "LKL_DataPearl_DataChanged", {
            data = userdata,
            dataString = userdataString,
            dataCompressed = userdataCompressed,
        } )

        sendToClients()
    end

    local function holdingTools( ply )
        local wep = ply:getActiveWeapon()
        if not isValid( wep ) then return false end

        return toolClassesLookup[wep:getClass()]
    end

    local function setBeingGrabbedBy( ply )
        ply = isValid( ply ) and ply or false

        if ply and isValid( beingReadBy ) then
            if chip():isFrozen() then return end

            local results = hookRunRemoteSafe( beingReadBy, "LKL_DataPearlReader_IsLocked" )
            if results and results[1][1] then return end
        end

        beingGrabbedBy = ply

        if beingGrabbedBy then
            if isValid( beingReadBy ) then
                hookRunRemoteSafe( beingReadBy, "LKL_DataPearlReader_ForceDrop" )
            end

            chip():enableGravity( false )
            chip():setCollisionGroup( COLLISION_GROUP.PASSABLE_DOOR )
        else
            chip():enableGravity( true )
            chip():setCollisionGroup( COLLISION_GROUP.NONE )
        end
    end

    local function initUserdata()
        pearlColorStr = string.sub( userdataCompressed, 1, 6 )
        pearlColor = Color(
            tonumber( "0x" .. pearlColorStr:sub( 1, 2 ) ),
            tonumber( "0x" .. pearlColorStr:sub( 3, 4 ) ),
            tonumber( "0x" .. pearlColorStr:sub( 5, 6 ) ),
            255
        )

        setUserdataCompressed( userdataCompressed:sub( 7 ) ) -- Update userdata, remote chips, etc.

        timer.simple( 0.1, function()
            chip():setColor( pearlColor )

            timer.create( "LKL_DataPearl_UpdateColor", 1, 0, function()
                local color = chip():getColor()
                color.a = 255

                if color == pearlColor then return end

                pearlColor = color
                pearlColorStr = pearlColor:toHex( false )

                setUserdata(
                    pearlColorStr ..
                    userdataCompressed
                )
            end )
        end )
    end


    ----- SETUP -----

    hook.add( "remote", "LKL_DataPearl_WriteData", function( _callingChip, callingPly, hookName, data, isCompressed )
        if callingPly ~= owner() then return end
        if hookName ~= "LKL_DataPearl_WriteData" then return end

        if type( data ) == "table" then
            data = bit.compress( json.encode( data ) )
        elseif type( data ) == "string" then
            if not isCompressed then
                data = bit.compress( data )
            end
        else
            return
        end

        if data ~= userdataCompressed then
            setUserdataCompressed( data )
        end
    end )

    hook.add( "remote", "LKL_DataPearl_ReadData", function( _callingChip, callingPly, hookName )
        if hookName ~= "LKL_DataPearl_ReadData" then return end
        if not canPlyReadData( callingPly ) then return end

        return {
            data = userdata,
            dataString = userdataString,
            dataCompressed = userdataCompressed,
        }
    end )

    hook.add( "remote", "LKL_DataPearl_SetBeingReadBy", function( callingChip, callingPly, hookName, state )
        if callingPly ~= owner() then return end
        if hookName ~= "LKL_DataPearl_SetBeingReadBy" then return end
        if isValid( beingReadBy ) and callingChip ~= beingReadBy then return end

        beingReadBy = state and callingChip or false
    end )

    hook.add( "remote", "LKL_DataPearl_GetBeingReadBy", function( _callingChip, _callingPly, hookName )
        if hookName ~= "LKL_DataPearl_GetBeingReadBy" then return end

        return beingReadBy
    end )

    hook.add( "remote", "LKL_DataPearl_GetBeingGrabbedBy", function( _callingChip, _callingPly, hookName )
        if hookName ~= "LKL_DataPearl_GetBeingGrabbedBy" then return end

        return beingGrabbedBy
    end )

    hook.add( "remote", "LKL_DataPearl_IsBeingGrabbed", function( _callingChip, _callingPly, hookName )
        if hookName ~= "LKL_DataPearl_IsBeingGrabbed" then return end

        return isValid( beingGrabbedBy )
    end )

    hook.add( "remote", "LKL_DataPearl_GetPearlsBeingRead", function( _callingChip, _callingPly, hookName )
        if hookName ~= "LKL_DataPearl_GetPearlsBeingRead" then return end
        if not isValid( beingReadBy ) then return end

        return chip(), beingReadBy
    end )

    hook.add( "ClientInitialized", "LKL_DataPearl_InitializeData", function( ply )
        sendToClients( ply )
    end )

    if GRAB_ALLOWED then
        hook.add( "KeyPress", "LKL_DataPearl_Grab", function( ply, key )
            if isValid( beingGrabbedBy ) then
                if ply ~= beingGrabbedBy then return end
                if holdingTools( ply ) then return end

                if key == IN_KEY.USE then
                    setBeingGrabbedBy( false )
                elseif key == IN_KEY.ATTACK then
                    chip():getPhysicsObject():setVelocity( beingGrabbedBy:getAimVector() * GRAB_THROW_STRENGTH )
                    setBeingGrabbedBy( false )
                end

                return
            end

            if key ~= IN_KEY.USE then return end

            local tr = ply:getEyeTrace()
            if tr.Entity ~= chip() then return end
            if tr.StartPos:getDistance( tr.HitPos ) > GRAB_RANGE then return end
            if holdingTools( ply ) then return end

            setBeingGrabbedBy( ply )
        end )

        hook.add( "think", "LKL_DataPearl_GrabMove", function()
            if not beingGrabbedBy then return end

            if not isValid( beingGrabbedBy ) then
                setBeingGrabbedBy( false )

                return
            end

            local curPos = chip():getPos()
            local eyePos = beingGrabbedBy:getShootPos()

            if eyePos:getDistance( curPos ) > GRAB_DROP_DISTANCE then
                setBeingGrabbedBy( false )

                return
            end

            local startPos = curPos
            local endPos = eyePos + beingGrabbedBy:getAimVector() * GRAB_DISTANCE
                + beingGrabbedBy:getVelocity() * GRAB_VEL_ACCOUNT
            local tr = trace.hull( startPos, endPos, VECTOR_ZERO, VECTOR_ZERO, { beingGrabbedBy, chip() } )
            local targetPos = tr.HitPos

            if tr.Hit then
                targetPos = targetPos + tr.HitNormal * 3
            end

            chip():getPhysicsObject():setVelocity( ( targetPos - curPos ) * GRAB_STRENGTH )
        end )
    end


    timer.simple( 0.1, function()
        if not IMPACT_SOUND_ENABLED then return end

        local onCooldown = false

        chip():addCollisionListener( function( colData )
            if onCooldown then return true end

            local speed = colData.HitSpeed:getLength()

            if speed <= IMPACT_SOUND_SPEED_MIN then return end

            onCooldown = true

            timer.simple( IMPACT_SOUND_COOLDOWN, function()
                onCooldown = false
            end )

            local volume = math.remap( math.min( speed, IMPACT_SOUND_SPEED_MAX ), IMPACT_SOUND_SPEED_MIN, IMPACT_SOUND_SPEED_MAX, 0, IMPACT_SOUND_VOLUME )
            local path = IMPACT_SOUND_PATH

            if type( path ) == "function" then
                path = path()
            end

            chip():emitSound( path, 75, IMPACT_SOUND_PITCH, volume )
        end, "LKL_DataPearl_ImpactSound" )
    end )

    if userdataCompressed == "" then -- No userdata
        -- Set default material and assign a random color.
        userdataCompressed = bit.tohex( math.random( 0, 255 ), 2 ) ..
            bit.tohex( math.random( 0, 255 ), 2 ) ..
            bit.tohex( math.random( 0, 255 ), 2 )

        chip():setMaterial( "sprops/trans/misc/sh_m2" )
        setUserdata( userdataCompressed )

        local _, strackTrace = pcall( error )

        timer.simple( 0.1, function()
            if isValid( chip():getParent() ) then
                -- Need to create an entirely new chip because sf messes up the chip's physics if you toolgun spawn it on an entity directly, with no way to fix it.
                local scripts = getScripts()
                local mainFilePath = "main"
                local code = scripts[mainFilePath]

                if not code then -- Find the name of the main file.
                    local stackEnd = string.split( strackTrace.traceback, "\n" )
                    stackEnd = stackEnd[#stackEnd]

                    mainFilePath = stackEnd:match( "SF:([%g%s]+).txt" )

                    mainFilePath = ( mainFilePath or "lkl/data_pearl" ) .. ".txt"
                    code = scripts[mainFilePath]

                    if not code then
                        mainFilePath = "lkl/data_pearl.txt"
                        code = scripts[mainFilePath]
                    end
                end

                scripts[mainFilePath] = nil

                prop.setPropUndo( true )
                prop.setPropClean( false )
                prop.createSent( chip():getPos() + Vector( 0, 0, 2 ), chip():getAngles(), "starfall_processor", false, {
                    Model = "models/sprops/geometry/sphere_3.mdl",
                    Code = code,
                    Files = scripts,
                } )

                chip():remove()
            else
                -- Nudge the chip out of the ground and run init now that it has color data.
                chip():setMass( 50 )
                chip():setPos( chip():getPos() + Vector( 0, 0, 2 ) )
                chip():enableMotion( true )

                initUserdata()
            end
        end )
    else -- Chip has userdata, process it.
        initUserdata()
    end
else
    local userdataCompressed = ""
    local userdataString = ""
    local userdata = {}
    local initialized = false


    local function updateName( isBlank )
        if isBlank then
            setName( NAME .. " (blank)" )
        else
            setName( NAME )
        end
    end


    ----- SETUP -----

    hook.add( "remote", "LKL_DataPearl_ReadData", function( _callingChip, callingPly, hookName )
        if hookName ~= "LKL_DataPearl_ReadData" then return end
        if not canPlyReadData( callingPly ) then return end

        if not initialized then
            return false
        end

        return {
            data = userdata,
            dataString = userdataString,
            dataCompressed = userdataCompressed,
        }
    end )


    net.receive( "LKL_DataPearl_SetBlankStatus", function()
        updateName( net.readBool() )
    end )

    net.receive( "LKL_DataPearl_DataChanged", function()
        local function onRead( str )
            userdataCompressed = str
            userdataString = bit.decompress( userdataCompressed ) or userdataCompressed
            userdata = {}
            initialized = true

            local jsonStrSplit = string.split( userdataString, "}," )

            if #jsonStrSplit < 1000 then
                pcall( function()
                    userdata = json.decode( userdataString ) or {}
                end )
            end

            fixColors( userdata )
            updateName( userdataCompressed == "" )

            hookRunRemoteSafe( getReadAllowedChips(), "LKL_DataPearl_DataChanged", {
                data = userdata,
                dataString = userdataString,
                dataCompressed = userdataCompressed,
            } )
        end

        if net.readBool() then
            onRead( net.readString() )
        else
            net.readStream( onRead )
        end
    end )


    updateName( true )
end
