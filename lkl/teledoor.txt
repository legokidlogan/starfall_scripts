--@name Teledoor
--@author legokidlogan
--@server
--@include lkl/input_generator.txt

teledoor = teledoor or {}


-- CONFIG:
teledoor.doorSounds = teledoor.doorSounds or {
    Default = "doors/latchunlocked1.wav", -- Good for normal-looking wood doors
    --Default = "physics/metal/metal_barrel_impact_hard5.wav", -- Good for vents
    [1] = nil,
    [2] = nil,
    [3] = nil,
    [4] = nil,
    [5] = nil,
    [6] = nil,
    [7] = nil,
    [8] = nil,
    [9] = nil,
    [10] = nil,
    [11] = nil,
}
-- End Config


local chair
local doors = {}
local doorMap = {}
local exits = {}
local chairType = ""
local useRange = 70
local storePos = Vector( 0, 0, -2000 )
local chairLocalOffsetPos = Vector( 90, 0, -11 ) -- Local to the exit marker
local chairLocalOffsetPlyAdjust = Vector( 0.7, 0, 0 )
local chairLocalOffsetAng -- Local to the exit marker, depends on the chair model (accounts for exit rotation)
local chairOffsetPos -- In world coordinates, depends on the chair model (accounts for the exit point)

local tableInsert = table.insert


projectNameID = "TeleDoor." .. chip():entIndex()

inputNames = inputNames or {}
inputTypes = inputTypes or {}

inGenRepeatMaxDefault = 20
inGenRepeatNames = inGenRepeatNames or {}
inGenRepeatTypes = inGenRepeatTypes or {}
inGenRepeatGroups = inGenRepeatGroups or {}
inGenRepeatMaxes = inGenRepeatMaxes or {}

tableInsert( inGenRepeatNames, "Door" )
tableInsert( inGenRepeatTypes, "ENTITY" )
tableInsert( inGenRepeatGroups, 1 )
tableInsert( inGenRepeatMaxes, inGenRepeatMaxDefault )

tableInsert( inGenRepeatNames, "Exit" )
tableInsert( inGenRepeatTypes, "ENTITY" )
tableInsert( inGenRepeatGroups, 1 )
tableInsert( inGenRepeatMaxes, inGenRepeatMaxDefault )

require( "lkl/input_generator.txt" )

do
    local spawnables = prop.getSpawnableSents( true ).Vehicles
    local mainType = "Couch_Furniture_01"
    local mainOP = Vector( 0, 0, -32.894 / 2 )
    local mainOA = Angle( 0, -90, 0 )
    local fallbackType = "Seat_Airboat"
    local fallbackOP = Vector( 0, 0, -25.042 / 2 )
    local fallbackOA = Angle( 0, -90, 0 )
    local useMainType = table.hasValue( spawnables, mainType )

    chairType = useMainType and mainType or fallbackType
    chairOffsetPos = useMainType and mainOP or fallbackOP
    chairLocalOffsetAng = useMainType and mainOA or fallbackOA
end


local function spawnChair()
    if isValid( chair ) then return end

    local ent
    local undo = prop.getPropUndo()

    pcall( function()
        ent = prop.createSent( storePos, Angle( 0, 0, 0 ), chairType, true )
    end )

    prop.setPropUndo( undo )

    if isValid( ent ) then
        chair = ent
        ent:setNocollideAll( true )
        ent:setMass( 50000 )
        ent:setColor( Color( 255, 255, 255, 0 ) )

        return true
    end

    timer.create( "LKL_TeleDoor_SpawnChair", function()
        spawnChair()
    end )

    return false
end

local function wireInput( name, value )
    local baseName, id = inGenGetInfo( name )

    if baseName == "Door" then
        local oldDoor = doors[id]

        if oldDoor ~= nil then
            doorMap[oldDoor] = nil
        end

        local door = isValid( value ) and value
        doors[id] = door or nil

        if door then
            doorMap[door] = id
        end
    elseif baseName == "Exit" then
        exits[id] = isValid( value ) and value
    end
end

hook.add( "input", "LKL_TeleDoor_WireInput", wireInput )

hook.add( "PlayerEnteredVehicle", "LKL_TeleDoor_EnterChair", function( ply, ent )
    if not isValid( ent ) then return end
    if ent ~= chair then return end

    local ind = chair.teledoorTargetInd

    if not ind then
        chair:ejectDriver()

        return
    end
    if ent.teledoorIsBusy then
        chair:ejectDriver()

        return
    end

    local door = doors[ind]
    local exit = exits[ind]

    if not isValid( door ) or not isValid( exit ) then return end

    local plySize = ply:obbSize()
    local exitBox = exit:obbSize()
    plySize = ( math.abs( plySize[1] ) + math.abs( plySize[2] ) ) / 2
    exitBox = Vector( exitBox[1] / 2, 0, 0 )

    ent.teledoorIsBusy = true
    ent:lock()
    ent:setParent()
    ent:enableMotion( false )
    ent:setPos( exit:localToWorld( chairLocalOffsetPos + chairLocalOffsetPlyAdjust * plySize + exitBox ) )
    ent:setAngles( exit:localToWorldAngles( chairLocalOffsetAng ) )

    timer.simple( 0.1, function()
        if not isValid( ent ) then return end

        if sound.emitSoundLeft() > 0 then
            ent:emitSound( teledoor.doorSounds[ind] or teledoor.doorSounds.Default, 75, 100, 1 )
        end

        ent:unlock()
        ent:ejectDriver()

        timer.simple( 0.1, function()
            if not isValid( ent ) then return end
            if not isValid( door ) then return end

            ent:setPos( storePos )

            timer.simple( 0.1, function()
                if not isValid( ent ) then return end

                ent.teledoorIsBusy = false
                ent.teledoorTargetInd = false
            end )
        end )
    end )
end )

hook.add( "KeyPress", "LKL_TeleDoor_UseDoor", function( ply, key )
    if key ~= IN_KEY.USE then return end

    if not isValid( chair ) then
        spawnChair()

        return
    end

    if chair.teledoorIsBusy then return end

    local tr = ply:getEyeTrace()
    local ind = hook.run( "LKL_TeleDoor_SelectDoorInd", ply, tr ) -- Allow the index to be overridden

    -- If no override, use what the player is looking at.
    if not ind then
        local ent = tr.Entity
        if not isValid( ent ) then return end

        ind = doorMap[ent]
        if not ind then return end
    end

    local ignoreUseRange = hook.run( "LKL_TeleDoor_IgnoreUseRange", ply, tr, ind )
    if not ignoreUseRange and tr.StartPos:getDistance( tr.HitPos ) > useRange then return end

    chair.teledoorTargetInd = ind
    chair:setPos( ply:getEyePos() + ply:getEyeAngles():getForward() * 10 + chairOffsetPos )
end )


timer.simple( 1, function()
    spawnChair()
end )
