--@name Interactive 3D Map
--@author
--@shared
--@ owneronly
--@include lkl/map_mesh.txt
--@include lkl/math/holo_trace.txt
--@include lkl/anims/screen_holo_animation.txt
--@include lkl/render/screen_mat.txt
--@include lkl/jiggle_fixer.txt
--@include lkl/prop_to_holo_direct.txt
--@include lkl/prop_to_holo_spawner.txt

libMapMesh = libMapMesh or {}

-- DEFAULT OVERRIDES TO map_mesh
if libMapMesh.LOAD_IMMEDIATELY == nil then libMapMesh.LOAD_IMMEDIATELY = false end
if libMapMesh.ADD_FLOOR == nil then libMapMesh.ADD_FLOOR = true end
-- END DEFAULT OVERRIDES

require( "lkl/map_mesh.txt" )
require( "lkl/jiggle_fixer.txt" )


libI3DMap = libI3DMap or {}

-- CONFIG DEFAULTS
if libI3DMap.DO_RECURSION == nil then libI3DMap.DO_RECURSION = true end
libI3DMap.OFFSET_POS = libI3DMap.OFFSET_POS or Vector( 0, 0, 0 )
libI3DMap.OFFSET_ANG = libI3DMap.OFFSET_ANG or Angle( 0, 0, 0 )
libI3DMap.START_LOADING_DIST = libI3DMap.START_LOADING_DIST or libMapMesh.MESH_WIDTH * 2

if libI3DMap.SHOW_PLAYERS == nil then libI3DMap.SHOW_PLAYERS = true end
libI3DMap.PLAYER_INTERVAL = libI3DMap.PLAYER_INTERVAL or 0.1
libI3DMap.PLAYER_SCALE = libI3DMap.PLAYER_SCALE or 5
if libI3DMap.SHOW_PLAYER_NAMES == nil then libI3DMap.SHOW_PLAYER_NAMES = true end
libI3DMap.PLAYER_NAME_FONT_SIZE = libI3DMap.PLAYER_NAME_FONT_SIZE or 30

if libI3DMap.DO_PINGS == nil then libI3DMap.DO_PINGS = true end
libI3DMap.PING_SIZE = libI3DMap.PING_SIZE or Vector( 2, 2, 0.5 )
libI3DMap.PING_LINGER = libI3DMap.PING_LINGER or 3

if libI3DMap.SHOW_PROP_STATIC == nil then libI3DMap.SHOW_PROP_STATIC = true end -- Only works for some maps. See https://github.com/legokidlogan/starfall_data/tree/main/map_data/prop_static
if libI3DMap.PROP_STATIC_USE_FULL_MATERIAL == nil then libI3DMap.PROP_STATIC_USE_FULL_MATERIAL = false end -- false to use the map mesh' coloring, true to use the prop's full material

libI3DMap.REPLICATED_ENT_UPDATE_INTERVAL = libI3DMap.REPLICATED_ENT_UPDATE_INTERVAL or 1
-- END CONFIG DEFAULTS


local holoMapOffsetPos = libI3DMap.OFFSET_POS:clone()
local holoMapOffsetAng = libI3DMap.OFFSET_ANG:clone()
local holoMapDoRecursion = libI3DMap.DO_RECURSION
local holoMapStartLoadingDist = libI3DMap.START_LOADING_DIST

local holoMapShowPlayers = libI3DMap.SHOW_PLAYERS
local holoMapPlayerInterval = libI3DMap.PLAYER_INTERVAL
local holoMapPlayerScale = libI3DMap.PLAYER_SCALE
local holoMapShowPlayerNames = holoMapShowPlayers and libI3DMap.SHOW_PLAYER_NAMES
local holoMapPlayerNameFontSize = libI3DMap.PLAYER_NAME_FONT_SIZE

local holoMapPingSize = libI3DMap.PING_SIZE:clone()
local holoMapPingLinger = libI3DMap.PING_LINGER

local holoMapShowPropStatic = libI3DMap.SHOW_PROP_STATIC
local holoMapPropStaticUseFullMaterial = libI3DMap.PROP_STATIC_USE_FULL_MATERIAL

local holoMapReplicatedEntUpdateInterval = libI3DMap.REPLICATED_ENT_UPDATE_INTERVAL

local TRACE_LENGTH = 50000
local TRACE_COLLISION_GROUP = COLLISION_GROUP.DEBRIS
local TRACE_MASK = MASK.SOLID_BRUSHONLY

local MAP_MIN_BOUNDS = nil
local MAP_MAX_BOUNDS = nil

local mapDataReady = false


-- Takes a world pos and ang, then uses its relation to the holo map to convert to mesh pos and ang.
function libI3DMap.worldToMeshThroughHoloMap( worldPos, worldAng )
    local meshOriginPos, meshOriginAng = localToWorld( holoMapOffsetPos, holoMapOffsetAng, chip():getPos(), chip():getAngles() )
    local meshPos, meshAng = worldToLocal( worldPos, worldAng, meshOriginPos, meshOriginAng )

    return meshPos, meshAng
end

-- Takes a mesh pos and ang, then converts it into world coordinates that line up in the holo map.
function libI3DMap.meshToHoloMap( meshPos, meshAng )
    local meshOriginPos, meshOriginAng = localToWorld( holoMapOffsetPos, holoMapOffsetAng, chip():getPos(), chip():getAngles() )

    return localToWorld( meshPos, meshAng, meshOriginPos, meshOriginAng )
end

--[[
    - Uses a player's eye position and angles relative to the holo map to do a trace on the world.
    - Can provide a player for eyePos to auto-get the eye info.
    - Returns a trace result.
--]]
function libI3DMap.holoMapTrace( eyePos, eyeAng )
    if type( eyePos ) == "Player" then
        eyeAng = eyePos:getEyeAngles()
        eyePos = eyePos:getShootPos()
    end

    local startMeshPos, startMeshAng = libI3DMap.worldToMeshThroughHoloMap( eyePos, eyeAng )
    local startPos = libMapMesh.meshPosToWorldPos( startMeshPos )
    local dir = startMeshAng:getForward()

    local tr = trace.line( startPos, startPos + dir * TRACE_LENGTH, nil, TRACE_COLLISION_GROUP, TRACE_MASK, false )

    if startPos:withinAABox( MAP_MIN_BOUNDS, MAP_MAX_BOUNDS ) then
        return tr
    end

    startPos = tr.HitPos + dir * 1

    return trace.line( startPos, startPos + dir * TRACE_LENGTH, nil, TRACE_COLLISION_GROUP, TRACE_MASK, false )
end

-- Similar to holoMapTrace(), but returns worldHitPos, worldHitNormal, holoMapHitPos, holoMapHitNormal instead of a full trace table.
function libI3DMap.holoMapTraceAlt( eyePos, eyeAng )
    local tr = libI3DMap.holoMapTrace( eyePos, eyeAng )
    if not tr.Hit then return end

    local worldHitPos = tr.HitPos
    local worldHitNormal = tr.HitNormal

    local meshHitPos = libMapMesh.worldPosToMeshPos( worldHitPos )
    local meshHitNormalAng = worldHitNormal:getAngle()
    local holoMapHitPos, holoMapHitNormalAng = libI3DMap.meshToHoloMap( meshHitPos, meshHitNormalAng )
    local holoMapHitNormal = holoMapHitNormalAng:getForward()

    return worldHitPos, worldHitNormal, holoMapHitPos, holoMapHitNormal
end


hook.add( "LKL_MapMesh_AddExtraData", "LKL_I3DMap_GetMeshConstants", function()
    local mapData = libMapData.getData()

    MAP_MIN_BOUNDS = mapData.PlayableRegion.MinBounds:clone()
    MAP_MAX_BOUNDS = mapData.PlayableRegion.MaxBounds + Vector( 0, 0, -libMapMesh.CEILING_CLIP )

    mapDataReady = true
end )


if SERVER then
    require( "lkl/prop_to_holo_direct.txt" )
    require( "lkl/prop_to_holo_spawner.txt" )


    local playerHolos = {}
    local playerHoloPlys = {}
    local playerPingHolos = {}
    local replicatedEnts = {}
    local replicatedEntHolos = nil
    local replicatedEntLastGroupID = nil

    inputNames = inputNames or {}
    inputTypes = inputTypes or {}

    table.insert( inputNames, "ReplicatedEnts" )
    table.insert( inputTypes, "ARRAY" )

    timer.simple( 0, function()
        wire.adjustInputs( inputNames, inputTypes )
    end )


    local function doHoloMapPing( ply )
        local worldHitPos, _, holoMapHitPos, holoMapHitNormal = libI3DMap.holoMapTraceAlt( ply )
        if not worldHitPos then return end

        local pingHolo = playerPingHolos[ply]

        if not isValid( pingHolo ) then
            pcall( function()
                pingHolo = hologram.create( Vector(), Angle(), "models/hunter/tubes/circle2x2.mdl" )
            end )

            if not isValid( pingHolo ) then return end

            pingHolo:setMaterial( "model_color" )
            pingHolo:setSize( holoMapPingSize )
            pingHolo:setColor( team.getColor( ply:getTeam() ) )

            playerPingHolos[ply] = pingHolo
        end

        local ang = holoMapHitNormal:getAngle()
        ang = ang:rotateAroundAxis( ang:getRight(), 90 )

        pingHolo:setPos( holoMapHitPos )
        pingHolo:setAngles( ang )

        timer.create( "LKL_I3DMap_PingLinger_" .. ply:getSteamID(), holoMapPingLinger, 1, function()
            if not isValid( pingHolo ) then return end

            pingHolo:remove()
            playerPingHolos[ply] = nil
        end )
    end

    local function wireInput( name, value )
        if name == "ReplicatedEnts" then
            if not mapDataReady then return end

            if replicatedEntLastGroupID then
                pthSpawner.cancel( replicatedEntLastGroupID )
                replicatedEntLastGroupID = nil
            end

            for _, holo in ipairs( replicatedEntHolos or {} ) do
                if isValid( holo ) then
                    holo:remove()
                end
            end

            replicatedEnts = value or {}
            replicatedEntHolos = nil

            if table.isEmpty( replicatedEnts ) then return end

            for i = #replicatedEnts, 1, -1 do
                local ent = replicatedEnts[i]

                if isValid( ent ) then
                    ent._i3dmap_ReplicatedEntLastPos = ent:getPos() + Vector( 1, 0, 0 )
                    ent._i3dmap_ReplicatedEntLastAng = ent:getAngles() + Angle( 1, 0, 0 )
                else
                    table.remove( replicatedEnts, i )
                end
            end

            local meshMapPos, meshMapAng = libI3DMap.meshToHoloMap( Vector(), Angle() )

            replicatedEntLastGroupID = pthSpawner.spawn(
                meshMapPos,
                meshMapAng,
                pthDirect.getHoloDataStr( replicatedEnts, nil, nil, 3 ),
                function( holos )
                    replicatedEntHolos = holos

                    for _, holo in ipairs( holos ) do
                        holo:setParent( chip() )
                    end
                end,
                Vector( libMapMesh.getMeshScale() )
            )
        end
    end


    hook.add( "KeyPress", "LKL_I3DMap_KeyPress", function( ply, key )
        if not mapDataReady then return end

        if key == IN_KEY.USE then
            doHoloMapPing( ply )
        end
    end )

    hook.add( "input", "LKL_I3DMap_WireInput", wireInput )

    hook.add( "LKL_MapMesh_AddExtraData", "LKL_I3DMap_AddReplicatedEnts", function()
        timer.simple( 2, function()
            wireInput( "ReplicatedEnts", wire.ports.ReplicatedEnts )
        end )
    end )


    timer.create( "LKL_I3DMap_UpdatePlayerHolos", holoMapPlayerInterval, 0, function()
        if not holoMapShowPlayers then
            timer.remove( "LKL_I3DMap_UpdatePlayerHolos" )

            return
        end

        if not mapDataReady then return end

        local plys = find.allPlayers( function( ply )
            return not ply._i3dmap_IsDisconnecting
        end )

        local plyCount = #plys
        local holoCount = #playerHolos

        if plyCount ~= holoCount then
            if plyCount > holoCount then
                for i = holoCount + 1, plyCount do
                    local ply = plys[i]

                    local holo
                    local _ = pcall( function()
                        holo = hologram.create( Vector(), Angle(), "models/player/kleiner.mdl" )
                    end )

                    if not holo then return end

                    holo:setPlayerColor( ply:getPlayerColor() )
                    jiggleFixer.setHoloScale( holo, Vector( libMapMesh.getMeshScale() * holoMapPlayerScale ) )

                    playerHolos[i] = holo
                    playerHoloPlys[i] = ply
                end
            else
                for i = holoCount, plyCount + 1, -1 do
                    playerHolos[i]:remove()
                    playerHolos[i] = nil
                end
            end

            holoCount = #playerHolos

            timer.create( "LKL_I3DMap_SetPlayerHolos", 0.25, 1, function()
                net.start( "LKL_I3DMap_SetPlayerHolos" )
                net.writeUInt( holoCount, 8 )

                for i = 1, holoCount do
                    net.writeEntity( playerHolos[i] )
                    net.writeEntity( plys[i] )
                end

                net.send()
            end )
        end

        local meshOriginPos, meshOriginAng = localToWorld( holoMapOffsetPos, holoMapOffsetAng, chip():getPos(), chip():getAngles() )

        for i = 1, holoCount do
            local ply = plys[i]
            local holo = playerHolos[i]

            if playerHoloPlys[i] ~= ply then
                jiggleFixer.setHoloModel( holo, "models/player/kleiner.mdl" )
                holo:setPlayerColor( ply:getPlayerColor() )

                net.start( "LKL_I3DMap_ChangePlayerHoloPlayer" )
                net.writeUInt( i, 8 )
                net.writeEntity( ply )
                net.send()

                playerHoloPlys[i] = ply
            end

            local pos = libMapMesh.worldPosToMeshPos( ply:getPos() )
            local ang = ply:getAngles()

            pos, ang = localToWorld( pos, ang, meshOriginPos, meshOriginAng )

            holo:setPos( pos )
            holo:setAngles( ang )
        end
    end )

    timer.create( "LKL_I3DMap_UpdateReplicatedEnts", holoMapReplicatedEntUpdateInterval, 0, function()
        if not mapDataReady then return end
        if not replicatedEntHolos then return end
        if cpuTotalAverage() > cpuMax() * 0.5 then return end

        for i = #replicatedEnts, 1, -1 do
            local ent = replicatedEnts[i]

            if isValid( ent ) then
                local lastPos = ent._i3dmap_ReplicatedEntLastPos
                local lastAng = ent._i3dmap_ReplicatedEntLastAng
                local pos = ent:getPos()
                local ang = ent:getAngles()

                if lastPos ~= pos or lastAng ~= ang then
                    local holo = replicatedEntHolos[i]

                    local meshPos = libMapMesh.worldPosToMeshPos( pos )
                    local worldPos, worldAng = libI3DMap.meshToHoloMap( meshPos, ent:getAngles() )

                    holo:setPos( worldPos )
                    holo:setAngles( worldAng )

                    ent._i3dmap_ReplicatedEntLastPos = pos
                    ent._i3dmap_ReplicatedEntLastAng = ang
                end
            else
                local holo = replicatedEntHolos[i]

                table.remove( replicatedEnts, i )
                table.remove( replicatedEntHolos, i )
                holo:remove()
            end
        end
    end )


    return
end


require( "lkl/math/holo_trace.txt" )
require( "lkl/anims/screen_holo_animation.txt" )
require( "lkl/render/screen_mat.txt" )


local COLOR_WHITE = Color( 255, 255, 255, 255 )

local meshesReady = false
local holoMapStartLoadingDistSqr = holoMapStartLoadingDist ^ 2
local mapHoloBase = nil
--local mapHolos = nil
local recursiveHoloBase = nil
--local recursiveHolos = nil
local playerHolos = {}
local playerHoloPlys = {}
local playerHoloLookup = {}
local modelToIdleAnimLookup = {}


function libI3DMap.getMapHoloBase()
    return mapHoloBase
end

function libI3DMap.getPlayerHolos()
    return playerHolos
end


local function getIdleAnim( ply )
    local model = ply:getModel()
    local anim = modelToIdleAnimLookup[model]
    if anim then return anim end

    local sequences = ply:getSequenceList()
    anim = table.keyFromValue( sequences, "idle_all_01" ) or table.keyFromValue( sequences, "idle" ) or 0

    modelToIdleAnimLookup[model] = anim

    return anim
end


hook.add( "LKL_MapMesh_MeshesReady", "LKL_I3DMap_MeshesReady", function()
    meshesReady = true

    timer.remove( "LKL_I3DMap_ShowProgress" )
    setName( "Interactive 3D Map" )

    for _, holo in ipairs( playerHolos ) do
        if isValid( holo ) then
            holo:setNoDraw( false )
        end
    end

    -- Spawn map holos
    timer.create( "LKL_I3DMap_SpawnMapHolos", 0.5, 0, function()
        local mapPos, mapAng = localToWorld( holoMapOffsetPos, holoMapOffsetAng, chip():getPos(), chip():getAngles() )

        mapHoloBase, mapHolos = libMapMesh.createMeshHolos( mapPos, mapAng, nil )
        if not mapHoloBase then return end

        timer.remove( "LKL_I3DMap_SpawnMapHolos" )

        mapHoloBase:setParent( chip() )

        hook.run( "LKL_I3DMap_MapReady" )
    end )

    -- Spawn recursive map holos
    if not holoMapDoRecursion then return end

    timer.create( "LKL_I3DMap_SpawnRecursiveMapHolos", 0.5, 0, function()
        recursiveHoloBase, recursiveHolos = libMapMesh.createMeshHolos( Vector(), Angle(), Vector( libMapMesh.getMeshScale() ) )
        if not recursiveHoloBase then return end

        timer.remove( "LKL_I3DMap_SpawnRecursiveMapHolos" )
    end )
end )


net.receive( "LKL_I3DMap_SetPlayerHolos", function()
    local count = net.readUInt( 8 )

    playerHolos = {}
    playerHoloPlys = {}

    for i = 1, count do
        local holo = net.readEntity()
        local ply = net.readEntity()

        if isValid( holo ) and isValid( ply ) then
            pcall( function()
                holo = holo:toHologram()

                if not meshesReady then
                    holo:setNoDraw( true )
                end
            end )

            playerHolos[i] = holo
            playerHoloPlys[i] = ply
            playerHoloLookup[holo] = i
            holo._i3dmap_PlayerHoloNeedsUpdate = true
        end
    end
end )

net.receive( "LKL_I3DMap_ChangePlayerHoloPlayer", function()
    local ind = net.readUInt( 8 )
    local ply = net.readEntity()

    if not isValid( ply ) then return end

    playerHoloPlys[ind] = ply

    local holo = playerHolos[ind]

    if holo then
        holo._i3dmap_PlayerHoloNeedsUpdate = true
    end
end )


timer.create( "LKL_I3DMap_StartLoading", 0.2, 0, function()
    if not mapDataReady then return end
    if render.getEyePos():getDistanceSqr( chip():getPos() ) > holoMapStartLoadingDistSqr then return end

    if libMapMesh.startLoadingMeshes() then
        timer.remove( "LKL_I3DMap_StartLoading" )

        timer.create( "LKL_I3DMap_ShowProgress", 0.1, 0, function()
            setName( "Interactive 3D Map\n(" .. math.round( libMapMesh.getMeshProgress() * 100 ) .. "%)" )
        end )
    end
end )

timer.create( "LKL_I3DMap_MatchPlayermodels", 5, 0, function()
    for i, ply in ipairs( playerHoloPlys ) do
        local holo = playerHolos[i]

        if isValid( ply ) and isValid( holo ) then
            local model = ply:getModel()

            if holo._i3dmap_PlayerHoloNeedsUpdate or model ~= holo:getModel() then
                jiggleFixer.setHoloModel( holo, model )
                holo:setAnimation( getIdleAnim( ply ) )
                holo._i3dmap_PlayerHoloNeedsUpdate = false
            end
        end
    end
end )


if holoMapDoRecursion then
    local lastChipPos = nil
    local lastChipAng = nil

    timer.create( "LKL_I3DMap_UpdateRecursiveHolos", 0.1, 0, function()
        if not recursiveHoloBase then return end
        if not isValid( chip() ) then return end

        local chipPos = chip():getPos()
        local chipAng = chip():getAngles()

        if chipPos == lastChipPos and chipAng == lastChipAng then return end

        lastChipPos = chipPos
        lastChipAng = chipAng

        local meshPos = libMapMesh.worldPosToMeshPos( chipPos )
        local pos, ang = libI3DMap.meshToHoloMap( meshPos, chipAng )

        recursiveHoloBase:setPos( pos )
        recursiveHoloBase:setAngles( ang )
    end )
end

if holoMapShowPlayerNames then
    local plyFont = render.createFont( "Roboto Mono", holoMapPlayerNameFontSize, 600, true, false, false, false, false, false )
    local rtPlayerNamesNeedsUpdate = false
    local curAimedPly = nil

    local rtNamePlayerNames = "lkl_i3dmap_player_names"
    render.createRenderTarget( rtNamePlayerNames )
    local _, rtMatPlayerNamesName = screenMatLib.createScreenMaterial( rtNamePlayerNames )

    local screenAnim = ScreenHoloAnimation:new( false, Vector(), Angle() )
    screenAnim:setScreenHoloVisible( true )
    screenAnim:setScreenHoloMaterials( { rtMatPlayerNamesName } )


    function libI3DMap.getPlayerNameAnim()
        return screenAnim
    end

    function libI3DMap.getPlayerNameHolo()
        return screenAnim:getGroupedHolo( "ScreenHolo", 1 )
    end


    local function setAimedPlayer( ply )
        if curAimedPly == ply then return end

        curAimedPly = ply
        rtPlayerNamesNeedsUpdate = true

        if ply then
            screenAnim:play()
        else
            screenAnim:stop()
        end
    end

    local function holoFilter( holo )
        return playerHoloLookup[holo] ~= nil
    end

    timer.create( "LKL_I3DMap_DisplayPlayerNames", 0.2, 0, function()
        if not meshesReady then return end
        local startPos = render.getEyePos()

        if startPos:getDistanceSqr( chip():getPos() ) > holoMapStartLoadingDistSqr then
            setAimedPlayer( nil )

            return
        end

        local eyeAng = render.getAngles()
        local _, _, holoMapHitPos = libI3DMap.holoMapTraceAlt( startPos, eyeAng )

        if not holoMapHitPos then
            setAimedPlayer( nil )

            return
        end

        local dir = eyeAng:getForward()
        local trHolo = {}

        pcall( function()
            trHolo = holoTrace.traceLineBlockedByEnts( startPos, startPos + dir * holoMapStartLoadingDist, holoFilter, { player(), chip() } )
        end )

        local holo = trHolo.Entity
        local holoInd = playerHoloLookup[holo or false]

        if not holoInd then
            setAimedPlayer( nil )

            return
        end

        -- If we hit the map before the holo, then the player doesn't have line of sight.
        if holoMapHitPos:getDistanceSqr( startPos ) < trHolo.HitPos:getDistanceSqr( startPos ) then
            setAimedPlayer( nil )

            return
        end

        local ply = playerHoloPlys[holoInd]

        if not isValid( ply ) then
            setAimedPlayer( nil )

            return
        end

        setAimedPlayer( ply )
    end )


    hook.add( "renderoffscreen", "LKL_I3DMap_DrawPlayerName", function()
        if not rtPlayerNamesNeedsUpdate then return end

        screenMatLib.startScratchWork()

        if isValid( curAimedPly ) then
            render.setMaterial()
            render.setColor( team.getColor( curAimedPly:getTeam() ) )
            render.setFont( plyFont )

            render.drawSimpleText( 512, 512 + holoMapPlayerNameFontSize, curAimedPly:getName(), 1, 3 )
        end

        screenMatLib.unstretchScratchWork()
        screenMatLib.updateScreenMaterial( rtNamePlayerNames )
    end )
end

if holoMapShowPropStatic then
    local propStaticQueue = nil
    local propStaticIncr = 0
    local mapScaleVec = nil
    local hideSkybox = nil
    local skyboxMinBounds = nil
    local skyboxMaxBounds = nil


    hook.add( "LKL_MapMesh_AddExtraData", "LKL_I3DMap_AddPropStatic", function( addSurfaceFunc )
        local url = "https://raw.githubusercontent.com/legokidlogan/starfall_data/main/map_data/prop_static/" .. game.getMap() .. ".txt"
        local numSamples = libMapMesh.COLOR_MODE_2_NUM_SAMPLES * 2
        local matNameToMat = {}

        http.get( url, function( data, _, _, code )
            if code ~= 200 then return end

            local propInfos = json.decode( bit.decompress( data ) )

            for _, propInfo in ipairs( propInfos ) do
                local matName = propInfo.matName
                local mat = matNameToMat[matName]

                if mat then
                    propInfo.mat = mat
                    propStaticQueue:addEntry( propInfo )

                    continue
                end

                if matName ~= "none" then
                    local success = pcall( function()
                        mat = material.load( matName )
                    end )

                    if success then
                        mat.brightnessMult = 1.5
                    else
                        mat = "none"
                    end
                end

                local surf = {
                    getMaterial = function()
                        return mat
                    end,

                    ignoreBlack = true,
                    sampleCountOverride = numSamples,
                }

                propInfo.mat = mat
                matNameToMat[matName] = mat

                addSurfaceFunc( surf, true )
                propStaticQueue:addEntry( propInfo )
            end
        end )
    end )

    hook.add( "LKL_I3DMap_MapReady", "LKL_I3DMap_CreateStaticPropHolos", function()
        local mapData = libMapData.getData()

        if mapData.Skybox ~= false then
            skyboxMinBounds = mapData.Skybox.MinBounds:clone()
            skyboxMaxBounds = mapData.Skybox.MaxBounds:clone()
        end

        mapScaleVec = Vector( libMapMesh.getMeshScale() )
        hideSkybox = libMapMesh.HIDE_SKYBOX

        propStaticQueue:start()
    end )


    propStaticQueue = Queue:new(
        function( _, entry )
            if not hologram.canSpawn() then return true end

            if hologram.hologramsLeft() < 20 then -- Give some extra breathing room for other holos as well
                print(
                    Color( 255, 255, 255, 255 ), "[I3DMap] ",
                    Color( 150127, 0, 0, 255 ), "Not enough holograms left to spawn static props! ",
                    Color( 255, 255, 255, 255 ), "Try increasing ",
                    Color( 255, 255, 150, 255 ), "sf_holograms_max_cl"
                )

                propStaticQueue:clear()

                return
            end

            local pos = entry.pos

            if hideSkybox and skyboxMinBounds and pos:withinAABox( skyboxMinBounds, skyboxMaxBounds ) then return end

            local ang = entry.ang
            local model = entry.model
            local scale = entry.scale
            local skin = entry.skin
            local mat = entry.mat

            pos = libMapMesh.worldPosToMeshPos( pos )
            pos, ang = libI3DMap.meshToHoloMap( pos, ang )

            propStaticIncr = propStaticIncr + 1

            local holo

            pcall( function()
                holo = hologram.create( pos, ang, model, mapScaleVec * scale )
            end )

            if not holo then return true end

            holo:setSkin( skin )
            holo:setParent( mapHoloBase )

            if holoMapPropStaticUseFullMaterial then
                holo:setMaterial( mat:getName() )
            else
                local obbCenterW = entry.obbCenterW
                local posToCenter = obbCenterW - pos
                local posToCenterLengthSqr = posToCenter:getLengthSqr()
                local lightNormal

                if posToCenterLengthSqr > 0.001 then
                    lightNormal = posToCenter / math.sqrt( posToCenterLengthSqr )
                else
                    lightNormal = ang:getForward()
                end

                local color = libMapMesh.getMapColor( obbCenterW, obbCenterW, lightNormal, propStaticIncr, mat ) or COLOR_WHITE

                holo:setColor( color )
                holo:setMaterial( "model_color" )
            end
        end,
        nil,
        {},
        0.5,
        50,
        0.4,
        "SpawnStaticProps"
    )
end
