--@name Trash Can
--@author legokidlogan
--@server
--@include lkl/sound_emitter.txt

require( "lkl/sound_emitter.txt" )


-- CONFIG
local deletionZoneWidth = 21
local deletionZoneHeight = 25
local detectionInterval = 0.1
local showDeletionZone = false

local classBlacklist = {
    gmod_wire_hologram = true,
    starfall_hologram = true,
}

local trashFilter = function( _ent )
    return true
end

local sounds = {
    TRASH_DESTROY = {
        PATH = function() return "physics/plastic/plastic_box_impact_bullet" .. math.random( 1, 3 ) .. ".wav" end,
        PITCH = function() return math.rand( 0.9, 1.05 ) end,
        DURATION = 0.6,
        VOLUME = 1,
        LEVEL = 75,
        DELAY = 0,
    },
}
-- END CONFIG


local soundEmitter = SoundEmitter:new( sounds )
local contraption = chip():getAllConstrained()
local blockedEntLookup = {}
local minBoundsOffset = Vector( -deletionZoneWidth / 2, -deletionZoneWidth / 2, 0 )
local maxBoundsOffset = Vector( deletionZoneWidth / 2, deletionZoneWidth / 2, deletionZoneHeight )

local soundHolo = hologram.create( chip():localToWorld( Vector( 0, 0, deletionZoneHeight ) ), Angle(), "models/hunter/plates/plate.mdl" )
soundHolo:setMaterial( "engine/writestencil" )
soundHolo:setColor( Color( 0, 0, 0, 0 ) )
soundHolo:setParent( chip() )

wire.adjustInputs( { "IgnoreEnts" }, { "ARRAY" } )


local function trashFilterEff( ent )
    if blockedEntLookup[ent] then return false end
    if not isValid( ent ) then return false end
    if classBlacklist[ent:getClass()] then return false end
    if not hasPermission( "entities.setPos", ent ) then return false end

    return trashFilter( ent )
end

local function getZoneBounds()
    local bottomPos = chip():getPos()

    return bottomPos + minBoundsOffset, bottomPos + maxBoundsOffset
end

local function detectTrash()
    local minBounds, maxBounds = getZoneBounds()
    local ents = find.inBox( minBounds, maxBounds, trashFilterEff )

    if #ents == 0 then return end

    soundEmitter:startSound( soundHolo, "TRASH_DESTROY" )

    for _, ent in ipairs( ents ) do
        ent:remove()
    end
end

local function wireInput( name, value )
    if name == "IgnoreEnts" then
        value = value or {}
        blockedEntLookup = {}

        for _, ent in ipairs( value ) do
            blockedEntLookup[ent] = true
        end

        for _, ent in ipairs( contraption ) do
            blockedEntLookup[ent] = true
        end
    end
end


hook.add( "input", "LKL_TrashCan_WireInput", wireInput )


timer.simple( 1, function()
    wireInput( "IgnoreEnts", wire.ports.IgnoreEnts )

    timer.create( "LKL_TrashCan_DetectTrash", detectionInterval, 0, detectTrash )
end )


if not showDeletionZone then return end

local zoneHolo = hologram.create( chip():localToWorld( Vector( 0, 0, deletionZoneHeight ) ), Angle(), "models/hunter/blocks/cube2x2x2.mdl" )
zoneHolo:setSize( -Vector( deletionZoneWidth, deletionZoneWidth, deletionZoneHeight ) )
zoneHolo:setMaterial( "model_color" )
zoneHolo:setColor( Color( 200, 200, 255, 150 ) )

local zoneHolo2 = hologram.create( chip():localToWorld( Vector( 0, 0, deletionZoneHeight ) ), Angle(), "models/hunter/blocks/cube2x2x2.mdl" )
zoneHolo2:setSize( Vector( deletionZoneWidth, deletionZoneWidth, deletionZoneHeight ) )
zoneHolo2:setMaterial( "model_color" )
zoneHolo2:setColor( Color( 200, 200, 255, 150 ) )


hook.add( "think", "LKL_TrashCan_MoveZoneHolo", function()
    local minBounds, maxBounds = getZoneBounds()
    local pos = ( minBounds + maxBounds ) / 2

    zoneHolo:setPos( pos )
    zoneHolo2:setPos( pos )
end )
