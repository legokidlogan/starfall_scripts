--@name Poly Tools
--@author legokidlogan
--@client

polyTools = polyTools or {}

if polyTools.drawPoly then return end


local mathRad = math.rad
local mathCos = math.cos
local mathSin = math.sin
local tableInsert = table.insert
local renderDrawPoly = render.drawPoly


--[[
    - Similar to render.drawPoly(), but scales and positions relative to the given values.
    - For the poly coords, 0 is far top/left, 1 is far bottom/right.
    - http://thegrb93.github.io/StarfallEx/#Libraries.render.drawPoly
--]]
function polyTools.drawPoly( points, xPos, yPos, width, height )
    local newPoints = {}

    for i = 1, #points do
        local point = points[i]
        newPoints[i] = {
            x = xPos + point.x * width,
            y = yPos + point.y * height,
            u = point.u,
            v = point.v,
        }
    end

    renderDrawPoly( newPoints )
end

-- Same as polyTools.drawPoly() but for drawing multiple separate polys in one call.
function polyTools.drawPolys( polys, xPos, yPos, width, height )
    local drawPoly = polyTools.drawPoly

    for _, poly in ipairs( polys ) do
        drawPoly( poly, xPos, yPos, width, height )
    end
end

-- Same as polyTools.drawPoly() but without width/height scaling, which is faster.
function polyTools.drawPolyUnscaled( points, xPos, yPos )
    local newPoints = {}

    for i = 1, #points do
        local point = points[i]
        newPoints[i] = {
            x = xPos + point.x,
            y = yPos + point.y,
            u = point.u,
            v = point.v,
        }
    end

    renderDrawPoly( newPoints )
end

-- Same as polyTools.drawPolyUnscaled() but for drawing multiple separate polys in one call.
function polyTools.drawPolysUnscaled( polys, xPos, yPos )
    local drawPolyUnscaled = polyTools.drawPolyUnscaled

    for _, poly in ipairs( polys ) do
        drawPolyUnscaled( poly, xPos, yPos )
    end
end

function polyTools.polyFlipHorizontal( points )
    local newPoints = {}

    for _, point in ipairs( points ) do
        tableInsert( newPoints, 1, {
            x = 1 - point.x,
            y = point.y,
            u = point.u,
            v = point.v,
        } )
    end

    return newPoints
end

function polyTools.polyFlipVertical( points )
    local newPoints = {}

    for _, point in ipairs( points ) do
        tableInsert( newPoints, 1, {
            x = point.x,
            y = 1 - point.y,
            u = point.u,
            v = point.v,
        } )
    end

    return newPoints
end

-- Rotates clockwise around (0,0).
function polyTools.polyRotate( points, degrees )
    local newPoints = {}
    local rad = mathRad( degrees )

    for _, point in ipairs( points ) do
        tableInsert( newPoints, {
            x = point.x * mathCos( rad ) - point.y * mathSin( rad ),
            y = point.x * mathSin( rad ) + point.y * mathCos( rad ),
            u = point.u,
            v = point.v,
        } )
    end

    return newPoints
end

-- Rotates clockwise around the given point, or around the bounding box center of the poly if no point is given.
function polyTools.polyRotateAround( points, degrees, xAnchor, yAnchor )
    if not xAnchor and not yAnchor then
        local xMin, xMax, yMin, yMax = math.huge, -math.huge, math.huge, -math.huge

        for _, point in ipairs( points ) do
            local x = point.x
            local y = point.y

            if x < xMin then xMin = x end
            if x > xMax then xMax = x end
            if y < yMin then yMin = y end
            if y > yMax then yMax = y end
        end

        xAnchor = ( xMin + xMax ) / 2
        yAnchor = ( yMin + yMax ) / 2
    end

    points = polyTools.polyTranslate( points, -xAnchor, -yAnchor )
    points = polyTools.polyRotate( points, degrees )
    points = polyTools.polyTranslate( points, xAnchor, yAnchor )

    return points
end

function polyTools.polyTranslate( points, xOff, yOff )
    local newPoints = {}

    for _, point in ipairs( points ) do
        tableInsert( newPoints, {
            x = point.x + xOff,
            y = point.y + yOff,
            u = point.u,
            v = point.v,
        } )
    end

    return newPoints
end

-- Scales relative to the 0,0 origin.
function polyTools.polyScale( points, xMult, yMult )
    local newPoints = {}

    yMult = yMult or xMult

    for _, point in ipairs( points ) do
        tableInsert( newPoints, {
            x = point.x * xMult,
            y = point.y * yMult,
            u = point.u,
            v = point.v,
        } )
    end

    return newPoints
end

function polyTools.polyMakeCircleFilled( x, y, radius, numSegments, numDegrees, degreeOffset )
    local circle = {}

    circle[1] = { x = x, y = y, u = 0.5, v = 0.5 }

    numDegrees = numDegrees or 360
    degreeOffset = degreeOffset or 0

    for i = 0, numSegments do
        local a = mathRad( ( i / numSegments ) * -numDegrees + degreeOffset )
        circle[i + 2] = { x = x + mathSin( a ) * radius, y = y + mathCos( a ) * radius, u = mathSin( a ) / 2 + 0.5, v = mathCos( a ) / 2 + 0.5 }
    end

    return circle
end
