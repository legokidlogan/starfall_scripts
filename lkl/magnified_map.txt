--@name Magnified Map
--@author
--@shared
--@ owneronly
--@include lkl/interactive_3d_map.txt

--[[
    - A version of the Interactive 3D Map that gives players a magnifying glass to see into the actual world, props and all.
    - Spawn a prop and wire it up to MagButton. Then, players can press E on it to toggle the magnifying glass.
    - Hold left click while holding the magnifying glass to focus it.
    - Note that this will not let you see entities outside of your current PVS.
--]]

-- CONFIG
local magModelScale = 1
local magModelColor = Color( 80, 80, 80, 255 )
local magModelMaterial = "models/debug/debugwhite"
local magButtonRange = 300
local magFocusedDistance = 4 * magModelScale
local magUnfocusedOffsetPos = Vector( 10, -7, -3 ) * magModelScale
local magUnfocusedOffsetAng = Angle( 20, 15, 0 )
local magLerp = 0.05
local allowMagWarp = true
local rollLerp = 0.025
-- END CONFIG


require( "lkl/interactive_3d_map.txt" )


if SERVER then
    local rollLerpPlayers = {}


    inputNames = inputNames or {}
    inputTypes = inputTypes or {}

    table.insert( inputNames, "MagButton" )
    table.insert( inputTypes, "ENTITY" )

    wire.adjustInputs( inputNames, inputTypes )


    local function wireInput( name, value )
        if name == "MagButton" then
            net.start( "LKL_MagMap_SetMagButton" )
            net.writeEntity( isValid( value ) and value or game.getWorld() )
            net.send()
        end
    end

    local function canWarp( ply )
        return allowMagWarp and hasPermission( "entities.setPos", ply ) and hasPermission( "entities.setEyeAngles", ply )
    end


    hook.add( "input", "LKL_MagMap_WireInput", wireInput )

    if allowMagWarp then
        local lastRollTime = timer.curtime()

        timer.create( "LKL_MagMap_LerpRoll", 0.05, 0, function()
            local now = timer.curtime()
            local dt = now - lastRollTime

            lastRollTime = now

            for i = #rollLerpPlayers, 1, -1 do
                local ply = rollLerpPlayers[i]

                if not isValid( ply ) or not canWarp( ply ) then
                    table.remove( rollLerpPlayers, i )
                else
                    local ang = ply:getEyeAngles()
                    local roll = ang[3]

                    if math.abs( roll ) < 0.01 then
                        table.remove( rollLerpPlayers, i )
                    else
                        roll = math.lerp( rollLerp * dt * 150, roll, 0 )
                    end

                    ang[3] = roll
                    ply:setEyeAngles( ang )
                end
            end
        end )
    end


    net.receive( "LKL_MagMap_Warp", function( _, ply )
        local pos = net.readVector()
        local ang = net.readAngle()

        ply:setPos( pos )
        ply:setEyeAngles( ang )

        if ang[3] ~= 0 and not table.hasValue( rollLerpPlayers, ply ) then
            table.insert( rollLerpPlayers, ply )
        end
    end )

    net.receive( "LKL_MagMap_CheckWarpPerms", function( _, ply )
        if not isValid( ply ) then return end

        net.start( "LKL_MagMap_CheckWarpPerms" )
        net.writeBool( canWarp( ply ) )
        net.send( ply )
    end )


    timer.simple( 4, function()
        wireInput( "MagButton", wire.ports.MagButton )
    end )


    return
end


local COLOR_WHITE = Color( 255, 255, 255, 255 )
local VECTOR_ONE = Vector( 1, 1, 1 )
local ANGLE_ZERO = Angle( 0, 0, 0 )

local rtNameMag = "lkl_i3dmap_magnifying_glass"
render.createRenderTarget( rtNameMag )

local rtMatMag = material.create( "Refract_DX90" )
rtMatMag:setTextureRenderTarget( "$basetexture", rtNameMag )
rtMatMag:setInt( "$flags", 2048 )
rtMatMag:setInt( "$bluramount", 0 )
rtMatMag:setVector( "$refracttint", Vector( 1, 1, 1 ) )

local rtNameMagScratch = "lkl_i3dmap_magnifying_glass_scratch"
render.createRenderTarget( rtNameMagScratch )

local rtMatMagScratch = material.create( "UnlitGeneric" )
rtMatMagScratch:setTextureRenderTarget( "$basetexture", rtNameMagScratch )
rtMatMagScratch:setInt( "$flags", 0 )

local scrW, scrH = render.getGameResolution()
local meshesReady = false
local isMagActive = false
local isMagFocused = false
local magLerpActive = false
local magLerpScaleActive = false
local magHoloPosPrev = nil
local magHoloAngPrev = nil
local magHoloScalePrev = nil
local magHolo = nil
local magHolos = {}
local magDetailHolos = {}
local magButton = nil
local lerpStopThresholdSqr = 0.001 ^ 2
local lerpScaleStopThresholdSqr = 0.01 ^ 2
local magFocusedOffset = Vector( magFocusedDistance, 0, 0 )
local lastMagLerpTime = nil
local mapHoloBase = nil
local magMaxRangeSqr = nil
local magWarpEnabled = false
local isMagWarping = false
local magWarpScale = Vector( 3.5, 3.5, 1 )


do
    magHolo = hologram.create( Vector(), Angle(), "models/hunter/tubes/circle2x2.mdl" )
    local magHoloSize = Vector( 3.5, 3.5, 0.5 ) * magModelScale
    table.insert( magHolos, magHolo )
    magHolo:setSize( magHoloSize )
    magHolo:setMaterial( "!" .. rtMatMag:getName() )
    magHolo:setRenderMode( RENDERMODE.WORLDGLOW )
    magHolo:setColor( Color( 255, 255, 255, 254 ) )

    local magRing = hologram.create( Vector( 0, 0, -magHoloSize[3] / 2 ), Angle(), "models/hunter/tubes/tube1x1x1.mdl" )
    table.insert( magHolos, magRing )
    table.insert( magDetailHolos, magRing )
    magRing:setSize( magHoloSize * Vector( 1.1656, 1.1656, 1 ) )
    magRing:setMaterial( magModelMaterial )
    magRing:setColor( magModelColor )
    magRing:setParent( magHolo )

    local magHandle = hologram.create( Vector( -magHoloSize[1] / 2 + magHoloSize[3] * 0.5 / 5, 0, 0 ), Angle( -90, 180, 180 ), "models/hunter/tubes/tube1x1x1.mdl" )
    table.insert( magHolos, magHandle )
    table.insert( magDetailHolos, magHandle )
    magHandle._magMap_ScaleRemap = { 3, 2, 1 }
    magHandle:setSize( Vector( magHoloSize[3] * 1.5, magHoloSize[3] * 1.5, magHoloSize[1] * 2 ) )
    magHandle:setMaterial( magModelMaterial )
    magHandle:setColor( magModelColor )
    magHandle:setParent( magHolo )

    for _, holo in ipairs( magHolos ) do
        holo._magMap_BaseScale = holo:getScale()
    end

    for _, holo in ipairs( magDetailHolos ) do
        holo._magMap_LocalPos = holo:getPos()
    end

    if allowMagWarp then
        net.start( "LKL_MagMap_CheckWarpPerms" )
        net.send()
    end
end


local function setMagPosAng( pos, ang, isWorld, eyePos, eyeAng )
    eyePos = eyePos or render.getEyePos()
    eyeAng = eyeAng or render.getAngles()

    if isWorld then
        pos, ang = worldToLocal( pos, ang, eyePos, eyeAng )
    end

    if magLerpActive and magHoloPosPrev and pos:getDistanceSqr( magHoloPosPrev ) <= lerpStopThresholdSqr then
        magLerpActive = false
    end

    magHoloPosPrev = pos
    magHoloAngPrev = ang

    local posWorld, angWorld = localToWorld( pos, ang, eyePos, eyeAng )

    magHolo:setPos( posWorld )
    magHolo:setAngles( angWorld )
end

local function setMagScale( scale )
    if magLerpScaleActive and magHoloScalePrev and scale:getDistanceSqr( magHoloScalePrev ) <= lerpScaleStopThresholdSqr then
        magLerpScaleActive = false
    end

    magHoloScalePrev = scale

    for _, holo in ipairs( magHolos ) do
        local remap = holo._magMap_ScaleRemap

        if remap then
            holo:setScale( holo._magMap_BaseScale * Vector( scale[remap[1]], scale[remap[2]], scale[remap[3]] ) )
        else
            holo:setScale( holo._magMap_BaseScale * scale )
        end

        local localPos = holo._magMap_LocalPos

        if localPos then
            holo:setPos( magHolo:localToWorld( localPos * scale ) )
        end
    end
end

local function setMagActive( state )
    if isMagWarping then
        if not state then return end

        isMagWarping = false
        magLerpScaleActive = false
        setMagScale( VECTOR_ONE )
    end

    isMagActive = state
    magLerpActive = true
    lastMagLerpTime = timer.systime()

    for _, holo in ipairs( magHolos ) do
        holo:setNoDraw( not isMagActive )
    end
end

-- In coords local to the eye
local function calcIntendedMagPosAng()
    local pos
    local ang

    if isMagFocused then
        pos = magFocusedOffset
        ang = ANGLE_ZERO
    else
        pos = magUnfocusedOffsetPos
        ang = magUnfocusedOffsetAng
    end

    -- Account for weird model axes
    ang = ang:rotateAroundAxis( ang:getRight(), 90 )

    return pos, ang
end

local function calcIntendedMagScale()
    local scale = VECTOR_ONE
    local lerpSpeed = 1

    if isMagWarping then
        scale = magWarpScale
        lerpSpeed = 0.3
    end

    return scale, lerpSpeed
end

local function isTooFarFromMap( realEyePos )
    if not mapHoloBase then
        mapHoloBase = libI3DMap.getMapHoloBase()
        if not mapHoloBase then return false end

        magMaxRangeSqr = ( libMapMesh.MESH_WIDTH * 4 ) ^ 2
    end

    local mapPos = mapHoloBase:getPos()

    return realEyePos:getDistanceSqr( mapPos ) > magMaxRangeSqr
end

local function holdingUtilitySwep()
    local wep = player():getActiveWeapon()
    if not isValid( wep ) then return false end

    local class = wep:getClass()

    return class == "weapon_physgun" or class == "gmod_tool"
end


hook.add( "LKL_MapMesh_MeshesReady", "LKL_MagMap_MeshesReady", function()
    timer.simple( 1, function()
        meshesReady = true
        setName( "Magnified Map" )
    end )
end )

hook.add( "RenderScene", "LKL_MagMap_RenderMag", function( realEyePos, realEyeAng )
    if not meshesReady then return end
    if not isMagActive then return end
    if cpuTotalAverage() > cpuMax() * 0.5 then return end

    if isTooFarFromMap( realEyePos ) then
        setMagActive( false )

        return
    end

    local magHoloPos, magHoloAng = calcIntendedMagPosAng()
    local now = timer.systime()

    if not lastMagLerpTime then
        lastMagLerpTime = now
    end

    if not magHoloPosPrev then
        magHoloPosPrev = magHoloPos
        magHoloAngPrev = magHoloAng
    end

    magHolo:setNoDraw( true )

    if magLerpActive then
        local dt = now - lastMagLerpTime
        local magLerpEff = magLerp * dt * 150 -- Baseline values were done at 150 fps, so dt / ( 1 / 150 ) = dt * 150

        setMagPosAng(
            math.lerpVector( magLerpEff, magHoloPosPrev, magHoloPos ),
            math.lerpAngle( magLerpEff, magHoloAngPrev, magHoloAng ),
            false,
            realEyePos,
            realEyeAng
        )
    else
        setMagPosAng( magHoloPos, magHoloAng, false, realEyePos, realEyeAng )
    end

    if magLerpScaleActive then
        if not magHoloScalePrev then
            magHoloScalePrev = VECTOR_ONE
        end

        local scale, lerpSpeed = calcIntendedMagScale()
        local dt = now - lastMagLerpTime
        local magLerpEff = lerpSpeed * magLerp * dt * 150

        setMagScale( math.lerpVector( magLerpEff, magHoloScalePrev, scale ) )

        if not magLerpScaleActive then
            setMagScale( scale )

            if isMagWarping then
                isMagWarping = false
                isMagFocused = false
                magLerpActive = true
                setMagScale( VECTOR_ONE )

                local targetEyePos, targetEyeAng = libI3DMap.worldToMeshThroughHoloMap( realEyePos, realEyeAng )
                targetEyePos = libMapMesh.meshPosToWorldPos( targetEyePos )

                local playerPosLocal = worldToLocal( player():getPos(), ANGLE_ZERO, realEyePos, realEyeAng )
                local targetPlayerPos = localToWorld( playerPosLocal, ANGLE_ZERO, targetEyePos, targetEyeAng )

                net.start( "LKL_MagMap_Warp" )
                net.writeVector( targetPlayerPos )
                net.writeAngle( targetEyeAng )
                net.send()
            end
        end
    end

    lastMagLerpTime = now

    local viewPos, viewAng = libI3DMap.worldToMeshThroughHoloMap( realEyePos, realEyeAng )
    viewPos = libMapMesh.meshPosToWorldPos( viewPos )

    render.selectRenderTarget( rtNameMagScratch )

    render.setColor( COLOR_WHITE )
    render.renderView( {
        origin = viewPos,
        angles = viewAng,
        aspectratio = scrW / scrH,
        x = 0,
        y = 0,
        w = scrW,
        h = scrH,
        drawviewmodel = false,
        drawviewer = true,
        zfar = 50000,
    } )

    render.selectRenderTarget()

    magHolo:setNoDraw( false )

    render.selectRenderTarget( rtNameMag )
    render.setMaterial( rtMatMagScratch )
    render.drawTexturedRect( 0, 0, 1024, 1024 )
    render.selectRenderTarget()
end )

hook.add( "KeyPress", "LKL_MagMap_PressMagButton", function( ply, key )
    if not isFirstTimePredicted() then return end
    if not isValid( magButton ) then return end
    if key ~= IN_KEY.USE then return end

    local tr = ply:getEyeTrace()

    if tr.Entity ~= magButton then return end
    if tr.HitPos:getDistance( tr.StartPos ) > magButtonRange then return end

    setMagActive( not isMagActive )

    if isMagActive then
        setMagPosAng( tr.HitPos, tr.HitNormal:getAngle(), true )
    end
end )

hook.add( "KeyPress", "LKL_MagMap_FocusMag", function( _, key )
    if isMagWarping then return end
    if not isFirstTimePredicted() then return end
    if key ~= IN_KEY.ATTACK then return end
    if holdingUtilitySwep() then return end

    isMagFocused = true
    magLerpActive = true
end )

hook.add( "KeyRelease", "LKL_MagMap_UnfocusMag", function( _, key )
    if isMagWarping then return end
    if not isFirstTimePredicted() then return end
    if key ~= IN_KEY.ATTACK then return end

    isMagFocused = false
    magLerpActive = true
end )

hook.add( "KeyPress", "LKL_MagMap_StartMagWarp", function( _, key )
    if not isMagFocused then return end
    if not magWarpEnabled then return end
    if isMagWarping then return end
    if not isFirstTimePredicted() then return end
    if key ~= IN_KEY.ATTACK2 then return end
    if holdingUtilitySwep() then return end

    isMagWarping = true
    magLerpScaleActive = true
end )



net.receive( "LKL_MagMap_SetMagButton", function()
    magButton = net.readEntity()

    if magButton == game.getWorld() then
        magButton = nil
        setMagActive( false )
    end
end )

net.receive( "LKL_MagMap_CheckWarpPerms", function()
    magWarpEnabled = net.readBool()
end )
