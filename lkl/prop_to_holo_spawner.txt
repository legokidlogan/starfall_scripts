--@name Prop to Holo Spawner
--@author legokidlogan
--@server
--@include lkl/queue.txt

if pthSpawner and pthSpawner.spawn then return end

require( "lkl/queue.txt" )


pthSpawner = pthSpawner or {}

local COLOR_DEFAULT = Color( 255, 255, 255, 255 )
local RENDER_MODE_DEFAULT = 0

local holoGroups = {}
local holoGroupCallbacks = {}
local holoGroupOrigins = {}
local holoGroupIncrement = 0
local spawnQueue


--[[
    - Spawns holograms based off of Prop to Holo data.

    pos: (Vector)
        - The origin for the collection of holos.
    dataStr: (string)
        - The PtH data string to use.
        - Files generated by PtH are scripts that return a string, so you can do something like this:
            local myHoloData = require( "myHoloData.txt" )
            pthSpawner.spawn( Vector( 0, 0, 0 ), myHoloData )
    callback: (optional) (function)
        - A function of the form  function( holograms ) end
        - Called when the holograms are done being created.
--]]
function pthSpawner.spawn( pos, dataStr, callback )
    if type( pos ) ~= "Vector" then error( "Expected pos to be a Vector" ) end
    if type( dataStr ) ~= "string" then error( "Expected dataStr to be a string" ) end

    if callback == nil then
        callback = function() end
    end

    if type( callback ) ~= "function" then error( "Expected callback to be a function or nil" ) end

    holoGroupIncrement = holoGroupIncrement + 1
    holoGroups[holoGroupIncrement] = {}
    holoGroupCallbacks[holoGroupIncrement] = callback
    holoGroupOrigins[holoGroupIncrement] = pos

    local data = json.decode( dataStr )
    local dataCount = #data

    if dataCount + spawnQueue:getLength() > hologram.hologramsLeft() then
        print( "PtH cannot spawn any more holograms!" )

        return
    end

    for _, entry in ipairs( data ) do
        entry.GroupID = holoGroupIncrement
    end

    data[dataCount].IsLast = true

    spawnQueue:addEntriesAndStart( data )
end


spawnQueue = Queue:new(
    function( _, entry )
        if not hologram.canSpawn() then return true end

        local groupID = entry.GroupID
        local origin = holoGroupOrigins[groupID]

        local holo
        local success = pcall( function()
            holo = hologram.create( entry.Pos + origin, entry.Ang, entry.Model )
        end )

        if not success then return true end

        local holoGroup = holoGroups[groupID]
        local scale = entry.Scale

        holo:setMaterial( entry.Material )
        holo:setColor( entry.Color or COLOR_DEFAULT )
        holo:setRenderMode( entry.RenderMode or RENDER_MODE_DEFAULT )
        table.insert( holoGroup, holo )

        if scale then
            holo:setScale( scale )
        end

        if entry.IsLast then
            local callback = holoGroupCallbacks[groupID]

            callback( holoGroup )

            holoGroups[groupID] = nil
            holoGroupCallbacks[groupID] = nil
            holoGroupOrigins[groupID] = nil
        end
    end,
    nil,
    nil,
    0.1,
    0,
    0.75,
    "PtH_SpawnQueue"
)
